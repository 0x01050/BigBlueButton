<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:views="org.bigbluebutton.lib.common.views.*"
				width="100%">

	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.TextConverter;
			
			import org.bigbluebutton.lib.chat.models.ChatMessage;
			import org.bigbluebutton.lib.user.utils.UserUtils;
			
			override public function set data(obj:Object):void {
				super.data = obj;
				var m:ChatMessage = obj as ChatMessage;
				if (m) {
					time.text = m.time
					if (!isHTMLString(m.senderText)) {
						message.text = m.senderText;
					} else {
						message.textFlow = TextConverter.importToFlow(m.senderText, TextConverter.TEXT_FIELD_HTML_FORMAT);
					}
					var sameUser:Boolean = (m.lastSenderId == m.senderId);
					var sameTime:Boolean = (m.lastTime == m.time);
					if (sameUser && sameTime) {
						username.includeInLayout = time.includeInLayout = false;
						username.visible = time.visible = false;
						participantIcon.visible = false;
					} else {
						username.includeInLayout = time.includeInLayout = true;
						username.visible = time.visible = true;
						if (m.name == " ") {
							participantIcon.visible = false;
							username.visible = false;
							username.includeInLayout = false;
						} else {
							username.text = m.name;
							participantIcon.displayInitials = UserUtils.getInitials(m.name);
							participantIcon.visible = true;
							username.visible = true;
							username.includeInLayout = true;
						}
					}
				}
			}
			
			/**
			 * Checks if message string contains opening and closing HTML tag e.g. <....>
			 **/
			public function isHTMLString(str:String):Boolean {
				var pattern:RegExp = new RegExp("(\<+.*\>+)");
				var result:Object = pattern.exec(str);
				if (result == null) {
					return false;
				}
				return true;
			}
		]]>
	</fx:Script>

	<s:VGroup width="100%"
			  padding="{getStyle('padding')}">
		<s:HGroup width="100%"
				  verticalAlign="middle"
				  gap="{getStyle('padding')}">
			<views:ParticipantIcon id="participantIcon" />
			<s:Label id="username"
					 visible="true"
					 color="{getStyle('nameColor')}"
					 fontSize="{getStyle('nameFontSize')}" />
			<s:Label id="time"
					 fontSize="{getStyle('timeFontSize')}" />
		</s:HGroup>
		<s:RichEditableText paddingLeft="{participantIcon.width + getStyle('padding')}"
							editable="false"
							selectable="false"
							id="message"
							width="100%" />
	</s:VGroup>
</s:ItemRenderer>
