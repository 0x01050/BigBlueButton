<?xml version="1.0" encoding="utf-8"?>
<mx:ApplicationControlBar xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="onCreationCompleteHandler(event)">
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.core.GlobalDispatcher;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.sliderClasses.Slider;
			import mx.events.FlexEvent;
			import mx.events.SliderEvent;
			
			import org.bigbluebutton.main.events.PlaybackEvent;
			import org.bigbluebutton.main.events.TimelineEvent;
			import org.bigbluebutton.main.models.PlaybackConstants;
			
			private var _timer:Timer;
			
			[Bindable] private var end_playback:int;
			private var _arraypos:int;
			
			[Bindable] private var _minutetimeline:int;
			[Bindable] private var _timeline:ArrayCollection;
			private var _isPlaying:Boolean = false;
			
			
			/******** This method handles the timeline is loaded *********/
			public function updateTimeline(event:TimelineEvent):void{
				_timeline=event.timeline;
				btnPlay.enabled=true;
				btnStop.enabled=true;
				labObjects.text="total events loaded: "+_timeline.length;
			}
			
			
			protected function sliderTL_changeHandler(event:SliderEvent):void
			{
				var nextpos:Number=Math.round((event.currentTarget as Slider).value);
				
				if(nextpos>_minutetimeline){
					updateForwardTimeline(nextpos);
				}else if(nextpos<_minutetimeline){
					
				}
				
			}
			
			private function updateForwardTimeline(nextminute:Number):void{
				// instead of checking each minute, it will be better choose only the minutes event
				var currentminute:int=getSecondFromTimeline(_arraypos);
				while(currentminute<nextminute){
					var attribs:Object=_timeline.getItemAt(_arraypos);
					dispatchPlaybackEvent(attribs);
					
					_arraypos++;
					currentminute=getSecondFromTimeline(_arraypos);
				}
				_minutetimeline=nextminute;
				
				_timer.stop();
				_timer=new Timer(1000,end_playback-nextminute);
				_timer.addEventListener(TimerEvent.TIMER,updateTimelineDisplay);
			}
			
			protected function btnStop_clickHandler(event:MouseEvent):void{
				if(_isPlaying){
					_timer.stop();
					_isPlaying=false;
				}
			}
			protected function btnPlay_clickHandler(event:MouseEvent):void
			{
				if(!_isPlaying){
					_timer.start();
					_isPlaying=true;
				}					
			}
			
			protected function onCreationCompleteHandler(event:FlexEvent):void
			{
				_timer=new Timer(1000,60);
				_timer.addEventListener(TimerEvent.TIMER,updateTimelineDisplay);
				
				/* end minute of the conference */
				end_playback=420;
				_arraypos=0;
				_minutetimeline=0;
			}
			
			private function updateTimelineDisplay(evt:TimerEvent):void{
				_minutetimeline=_minutetimeline+1;
				sliderTL.value=_minutetimeline;
				firePlaybackEvent(_minutetimeline);
			}
			private function firePlaybackEvent(minute:int):void{
				//there is a for loop for check all the events that happen in the same minute
				for(var i:int=_arraypos;i<=end_playback;i++){
					var minute_event:int=getSecondFromTimeline(i);
					
					if(minute_event==minute){
						var attribs:Object=_timeline.getItemAt(i);
						Alert.show("hola "+attribs);
						dispatchPlaybackEvent(attribs);
					}
					else if(minute_event>minute){
						_arraypos=i;
						break;
					}
				}
			}
			
			private function getSecondFromTimeline(next_pos:int):int{
				//base
				var attribs_base:Object=_timeline.getItemAt(0);
				//new position
				var attribs_new:Object=_timeline.getItemAt(next_pos);
				
				var t1:Number=new Number(attribs_base.attribute("timestamp"));
				var t2:Number=new Number(attribs_new.attribute("timestamp"));
				
				return (int)(t2-t1)/1000;
			}
			
			private function dispatchPlaybackEvent(attribs:Object):void{
				var playbackevt:PlaybackEvent=new PlaybackEvent(PlaybackEvent.PLAYBACK_EVENT);
				playbackevt.attributes=attribs;
				//playbackevt.playtype=playtype;
				var dispatcher:GlobalDispatcher=new GlobalDispatcher();
				dispatcher.dispatchEvent(playbackevt);
			}
			
		]]>
	</mx:Script>
	<mx:VBox width="100%">
		<mx:HSlider id="sliderTL" tickInterval="1" value="{_minutetimeline}" width="100%" minimum="0" maximum="{end_playback}" dataTipPrecision="0" change="sliderTL_changeHandler(event)" />
		<mx:HBox>
			<mx:Button label="play" enabled="false" id="btnPlay" click="btnPlay_clickHandler(event)"/>
			<mx:Button label="stop" enabled="false" id="btnStop" click="btnStop_clickHandler(event)" />
			<mx:Label text="Loading Manifest File..." id="labObjects"/>		
		</mx:HBox>
	</mx:VBox>
</mx:ApplicationControlBar>
