<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
    title="Guests" showCloseButton="false" creationComplete="init()"
    x="0" y="0" layout="vertical" width="300" height="180" horizontalAlign="center">
	<mx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			import com.asfusion.mate.events.Dispatcher;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.core.managers.UserManager;
			import org.bigbluebutton.main.events.ResponseModeratorEvent;
			import org.bigbluebutton.main.events.ModuleLoadEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			import mx.containers.HBox;
			import mx.controls.Button;
			

			

			public var _name:String;
			public var userid:Number;
			
			
			[Bindable] private var message:String = "Users want to enter in this meeting";
			private var baseString:String = " User(s) want to enter in this meeting";
			private var urlLoader:URLLoader;
			private var guestWindowMap:Object = new Object();
			private var guestButtons:Object = new Object();
			private var images:Images = new Images();
			private var numberOfGuests:Number = 0;
			private var dispatcher:Dispatcher = new Dispatcher();
			[Bindable] public var acceptUserIcon:Class = images.accept_user;
			[Bindable] public var rejectUserIcon:Class = images.cancel_user;

			

			public function init():void {
				//Uncomment this line to make titlewindow undraggable			
				//this.isPopUp = false;
			}

			public function createAcceptButton(userid:Number):Button {
				var acceptBtn:Button = new Button();
				acceptBtn.addEventListener("click", function():void {handleClick(userid, true);},false);	
				acceptBtn.setStyle("icon", acceptUserIcon);
				return acceptBtn;
			}

			public function createRejectButton(userid:Number):Button {
				var rejectBtn:Button = new Button();
				rejectBtn.addEventListener("click", function():void {handleClick(userid, false);},false);
				rejectBtn.setStyle("icon", rejectUserIcon);
				return rejectBtn;
			}

			

	    		public function addGuest(userid:Number, username:String):void {
				
				
				numberOfGuests++;
				guestWindowMap[userid] = name;
				var box:HBox = new HBox();
				var label:Label = new Label();
				label.setStyle("horizontalAlign", "left");
				label.width = 100;
				label.text = username;
				box.addChild(label);
				message = numberOfGuests + baseString;
			
				var acceptBtn:Button = createAcceptButton(userid);	
				var rejectBtn:Button = createRejectButton(userid);
	
				box.addChild(acceptBtn);
				box.addChild(rejectBtn);
				
				this.addChild(box);
				guestButtons[userid] = box;
				this.visible = true;
				if(numberOfGuests > 1 && numberOfGuests < 11)				
					this.height+=28;
				

				
			}

			private function handleClick(userid:Number, resp:Boolean):void {
				sendToServer(resp, userid);
				remove(userid);	
				
			}

			public function sendToServer(acc:Boolean, userid:Number):void {
				var respCommand:ResponseModeratorEvent = new ResponseModeratorEvent(ResponseModeratorEvent.RESPONSE);
				respCommand.userid = userid;
				respCommand.resp = acc;
				dispatcher.dispatchEvent(respCommand);
			}

			public function sendResponseToAllGuests(resp:Boolean):void {
				var respCommand:ResponseModeratorEvent = new ResponseModeratorEvent(ResponseModeratorEvent.RESPONSE_ALL);
				respCommand.userid = userid;
				respCommand.resp = resp;
				dispatcher.dispatchEvent(respCommand);
				removeAllGuests();
			}
	
			public function removeAllGuests():void {
				
				if(numberOfGuests < 11 && numberOfGuests > 0) {
					this.height-=(28*(numberOfGuests-1))
				}
				numberOfGuests = 0;

				for (var key:String in guestWindowMap)
				{
				    var userid:Number = new Number(key);
				    this.removeChild(guestButtons[userid]);
				    delete guestButtons[userid];
				    guestWindowMap[userid] = null;

				}
				guestWindowMap = new Object();
				this.visible = false;
				message = numberOfGuests + baseString;
			}
		
			public function remove(userid:Number):void {

				if(guestWindowMap[userid] != null) {
					if(numberOfGuests > 1 && numberOfGuests < 11)				
						this.height-=28;
					numberOfGuests--;
				
					delete guestWindowMap[userid];
					this.removeChild(guestButtons[userid]);
					delete guestButtons[userid];
					if(this.hasGuest() == false) {
						this.visible = false;
					}

					message = numberOfGuests + baseString;
				}
			}
			

			public function hasGuest():Boolean {
				if(numberOfGuests > 0)
					return true;
				else
					return false;			
			}

			public function removeAll():void {
				PopUpManager.removePopUp(this);
				
			}
	
			
			
		]]>
	</mx:Script>
	<mx:Label text="{message}"/>
	<mx:HRule width = "100%"/>
	<mx:Button label = "Allow Everyone" width = "70%" click="sendResponseToAllGuests(true)"/>
	<mx:Button label = "Deny Everyone" width = "70%"  click="sendResponseToAllGuests(false)"/>
	<mx:HRule width = "100%"/>		

	

	
</mx:TitleWindow> 
