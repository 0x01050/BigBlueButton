<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
				xmlns:mate="http://mate.asfusion.com/" 
				width="500" height="240" 
				creationComplete="initDefaultMic()" 
				styleName="micSettingsWindowStyle"
				showCloseButton="false" 
				close="onCancelClicked()" 
				keyDown="handleKeyDown(event)">
	
	
	<mx:Script>
		<![CDATA[
			import flash.system.Security;
			import flash.system.SecurityPanel;
			import flash.ui.Keyboard;
			
			import mx.controls.sliderClasses.Slider;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.ItemClickEvent;
			import mx.events.SliderEvent;
			import mx.managers.PopUpManager;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			[Embed(source="assets/audio-test.mp3")]
			[Bindable] private var soundClass:Class;
			private var sound:Sound = new soundClass() as Sound;			
			private var soundChannel:SoundChannel;
			
			private var timer:Timer;
			private var mic:Microphone;
			private var biggestMicLevel:int = 0;
			private var micName:String;
			private var playingAudio:Boolean = false;
			private var images:Images = new Images();
			private var chromeAllow:ChromeAllow;
			private var userBrowser:String;
			[Bindable] private var cancelIcon:Class = images.cancel;
			[Bindable] private var microphoneList:Array;      
			[Bindable]private var baseIndex:int = 1;
			
			override public function move(x:Number, y:Number):void
			{
				return;
			}
			
			private function selectMicrophone(event:Event):void {
				LogUtil.debug("Changing microphone.");
				//testMicBtn.selected = false;
				if (mic != null){
					mic.setLoopBack(false);
				}
				mic = Microphone.getMicrophone(comboMicList.selectedIndex);     
				testMicrophone();
			}
			
			private function testMicrophone():void{
				micName = mic.name;
				biggestMicLevel = 0;
				LogUtil.debug("Testing microphone : " + micName);
				if (mic != null) {
					mic.setLoopBack(false);
					if (mic.muted) {
						LogUtil.debug("Microphone is muted.");
						mic.addEventListener(StatusEvent.STATUS, micStatusEventHandler);
						Security.showSettings(SecurityPanel.PRIVACY);
						//                Security.showSettings(SecurityPanel.MICROPHONE);
						return;
					} else {        
						// Update mic name
						if (micName != mic.name ){
							micName = mic.name;       				 
						}
						//Parameters valid only for the mic settings
						mic.setLoopBack(true);
						mic.setUseEchoSuppression(true);   
						//http://stackoverflow.com/questions/2936925/no-mic-activity-with-setloopback-set-to-false-as3
						//http://groups.yahoo.com/neo/groups/flexcoders/conversations/topics/144047
						mic.codec = SoundCodec.NELLYMOSER
						mic.soundTransform = new SoundTransform(0);  
						mic.gain = micRecordVolume.value;
						timer = new Timer(100);
						timer.addEventListener(TimerEvent.TIMER, updateMicLevel);
						timer.start();                 
						//Security.showSettings(SecurityPanel.MICROPHONE);
					}
				}else {
					LogUtil.warn("Microphone is used by other application.");
				}      
			}
			
			private function initDefaultMic():void {
				
				microphoneList = Microphone.names;
				LogUtil.debug("Available microphones: " + microphoneList);    
				mic = Microphone.getMicrophone(comboMicList.selectedIndex);
				testMicrophone();
				showChromeAllow();
				
				var tempArr:Array = new Array();
				tempArr.push("0%", ResourceUtil.getInstance().getString('bbb.micSettings.micRecordVolume.label'),"100%");
				micRecordVolume.labels = tempArr;
				
				/*		if (mic != null) {
				if (mic.muted) {
				// user has disallowed access to the mic
				mic.addEventListener(StatusEvent.STATUS, micStatusEventHandler);
				// when we open the window show the default acceptor first and then the custom one every other time
				mic.setLoopBack(true);
				mic.setLoopBack(false);
				} else {
				// user has allowed access to the mic
				mic.setLoopBack(false);
				mic.setUseEchoSuppression(true);
				}
				} else {
				LogUtil.warn("Microphone is used by another application.");
				}
				
				*/		
				/*timer = new Timer(100);
				timer.addEventListener(TimerEvent.TIMER, updateMicLevel);
				//timer.start(); Commenting this out because the mic level has been removed
				*/
				
			}
			
			// Added by Chad to enable closing the window without clicking the X
			private function handleKeyDown(event:KeyboardEvent):void {
				if (event.charCode == Keyboard.ESCAPE) {
					this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				}
			}
			
			private function micStatusEventHandler(event:StatusEvent):void {					
				switch(event.code) {
					case "Microphone.Muted":						
						LogUtil.warn("Access to microphone has been denied.");
						break;
					case "Microphone.Unmuted":
						//						mic.setLoopBack(true);
						//            mic.setUseEchoSuppression(true);            
						LogUtil.debug("Access to the microphone has been allowed.");
						testMicrophone();
						break;
					default:
						LogUtil.debug("unknown micStatusHandler event: " + event);
				}
			}			
			
			private function updateMicLevel(e:TimerEvent):void{
				if (mic != null) {
					if (mic.activityLevel > biggestMicLevel) {
						biggestMicLevel = mic.activityLevel;
					}
					if (chromeAllow && mic.activityLevel > 0){
						PopUpManager.removePopUp(chromeAllow);
					}
					//LogUtil.debug("Mic level: " + mic.activityLevel);
					micLevel.setProgress(mic.activityLevel, 100);					
				}
			}
			
			public function playButtonClickHandler():void {
				if (playButton.selected) {
					soundChannel = sound.play();  
					playingAudio = true;
				} else {
					soundChannel.stop();
					playButton.label = ResourceUtil.getInstance().getString('bbb.micSettings.playSound');
					playingAudio = false;
				}	                     
			}
			
			private function showChromeAllow():void{			 
				userBrowser =  ExternalInterface.call("determineBrowser");
				if (userBrowser == "Chrome"){
					chromeAllow = new ChromeAllow();   
					PopUpManager.addPopUp(chromeAllow, this, false);
				}
			}
			
			/*			
			private function showMicSettingsPanel():void {
			if (settingBtn.selected) {
			if (mic != null) {
			if (mic.muted) {
			Security.showSettings(SecurityPanel.PRIVACY);
			settingBtn.selected = false;
			return;
			} else {
			mic.setLoopBack(true);
			mic.setUseEchoSuppression(true);
			Security.showSettings(SecurityPanel.MICROPHONE);
			}
			}
			} else {
			mic.setLoopBack(false);
			}	
			}
			
			*/			
			
			
			
			
			private function onJoinClicked():void {
				
				LogUtil.debug("Biggest activity level detected for " + micName + ": " + biggestMicLevel );
				// Do one last check for if the mic has been allowed.
				// This must come first because cleanUp() will destroy mic 
				if (mic != null && mic.muted) {
					Security.showSettings(SecurityPanel.PRIVACY);
				}        
				if (biggestMicLevel > 0){
					joinConference();
				} else {
					var micWarning:MicWarning = new MicWarning();
					micWarning.micsettings = this;
					PopUpManager.addPopUp(micWarning, this, true);
					PopUpManager.centerPopUp(micWarning);
				}          	
			}	
			
			public function joinConference():void{			
				var joinEvent:BBBEvent = new BBBEvent("JOIN_VOICE_CONFERENCE_EVENT");
				joinEvent.payload['useMicrophone'] = true;
				joinEvent.payload['microphoneIndex'] = mic.index;
				dispatchEvent(joinEvent);	
				cleanUp();      
				PopUpManager.removePopUp(this);			
			}
			
			private function onCancelClicked():void {
				cleanUp();
				var event:BBBEvent = new BBBEvent(BBBEvent.MIC_SETTINGS_CLOSED);
				event.payload['clicked'] = "cancel";
				dispatchEvent(event);
				PopUpManager.removePopUp(this);
			}
			
			private function cleanUp():void {
				if (timer) timer.stop();
				mic.setLoopBack(false);
				mic = null;
				if (playingAudio) soundChannel.stop();								
			}
			
			private function changeRecordVolume(event:SliderEvent):void {
				var currentSlider:Slider=Slider(event.currentTarget);
				mic.gain = currentSlider.value
			}
			
			private var DEFAULT_HELP_URL:String = "http://www.bigbluebutton.org/content/videos";			
			private function onHelpButtonClicked():void {
				DEFAULT_HELP_URL =  BBB.initConfigManager().config.help.url;
				navigateToURL(new URLRequest(DEFAULT_HELP_URL));
			}
		]]>
	</mx:Script>
	<mx:VBox width="100%" height="100%"  paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		
		<mx:Canvas width="100%">
			<!-- mx:Label text="Audio Settings" styleName="micSettingsWindowTitleStyle"/ -->
			<mx:TextArea borderSkin="{null}" editable="false" text="{ResourceUtil.getInstance().getString('bbb.users.settings.audioSettings')}" styleName="micSettingsWindowTitleStyle"
						 tabIndex="{baseIndex}" width="400" left="0"/>
			<!-- accessibilityName="{ResourceUtil.getInstance().getString('bbb.micSettings.access.title')} "/ -->
			<mx:LinkButton toolTip="{ResourceUtil.getInstance().getString('bbb.mainToolbar.helpBtn')}"
						   label="?"
						   styleName="micSettingsWindowHelpButtonStyle" 
						   right="0"
						   height="22"
						   click="onHelpButtonClicked()"
						   tabIndex="{baseIndex+1}"
						   accessibilityName="{ResourceUtil.getInstance().getString('bbb.micSettings.access.helpButton')}"/>
		</mx:Canvas>
		<mx:VBox width="100%">
			<mx:HRule width="100%"/>
			<mx:HBox>
				<mx:ComboBox id="comboMicList" 
							 dataProvider="{microphoneList}" 
							 change="selectMicrophone(event)"
							 height="30" 
							 tabIndex="{baseIndex+2}" 
							 toolTip="{ResourceUtil.getInstance().getString('bbb.micSettings.comboMicList.toolTip')}" />
				<mx:HSlider id="micRecordVolume"
							maximum="100"
							snapInterval="1"                       
							labels="[0%,{ResourceUtil.getInstance().getString('bbb.micSettings.micRecordVolume.label')},100%]"
							tickInterval="10"
							liveDragging="true" 
							change="changeRecordVolume(event);"
							showTrackHighlight="true"
							trackColors="[ 0xEEEEEE, 0xFFFFFF ]"
							value="60"
							tabIndex="{baseIndex+3}" 
							toolTip="{ResourceUtil.getInstance().getString('bbb.micSettings.micRecordVolume.toolTip')}" />                           
			</mx:HBox>
			<mx:ProgressBar id="micLevel" 
							minimum="0" 
							maximum="100"
							direction="right"
							label=""
							mode="manual" 
							visible="true" 
							width="450"
							height="27"
							trackHeight="25"
							verticalGap="-20" 
							tabIndex="{baseIndex+4}" />
		</mx:VBox>
			<mx:HRule width="100%"/>
			<mx:Spacer height="10"/>
			<mx:HBox width="100%" horizontalAlign="right" horizontalGap="18">
				<mx:Button id="playButton" label="{ResourceUtil.getInstance().getString('bbb.micSettings.playSound')}" 
						   click="playButtonClickHandler()" toggle="true" styleName="micSettingsWindowPlaySoundButtonStyle"
						   toolTip="{ResourceUtil.getInstance().getString('bbb.micSettings.playSound.toolTip')}"
						   tabIndex="{baseIndex+7}" />
				<mx:Button id="okBtn" label="{ResourceUtil.getInstance().getString('bbb.micSettings.join')}" 
						   styleName="micSettingsWindowJoinButtonStyle"
						   click="onJoinClicked()" tabIndex="{baseIndex+8}"
						   toolTip="{ResourceUtil.getInstance().getString('bbb.micSettings.join.toolTip')}"/>
				<mx:Button id="cancelBtn" label="{ResourceUtil.getInstance().getString('bbb.micSettings.cancel')}" 
						   styleName="micSettingsWindowCancelButtonStyle"
						   click="onCancelClicked()" tabIndex="{baseIndex+9}"
						   toolTip="{ResourceUtil.getInstance().getString('bbb.micSettings.cancel.toolTip')}"/>
			</mx:HBox>
			
		</mx:VBox>		
		
</mx:TitleWindow>
