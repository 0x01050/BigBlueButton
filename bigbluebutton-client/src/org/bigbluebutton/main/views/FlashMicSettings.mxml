<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
				xmlns:mate="http://mate.asfusion.com/" 
				width="600" height="400" 
				creationComplete="onCreationComplete()" 
				styleName="micSettingsWindowStyle"
				showCloseButton="false" 
				close="onCancelClicked()" 
				keyDown="handleKeyDown(event)">

	<mx:Script>
		<![CDATA[
      import flash.system.Security;
      import flash.system.SecurityPanel;
      import flash.ui.Keyboard;
      
      import mx.controls.sliderClasses.Slider;
      import mx.core.IFlexDisplayObject;
      import mx.events.CloseEvent;
      import mx.events.ItemClickEvent;
      import mx.events.SliderEvent;
      import mx.managers.PopUpManager;
      
      import org.bigbluebutton.common.Images;
      import org.bigbluebutton.common.LogUtil;
      import org.bigbluebutton.core.BBB;
      import org.bigbluebutton.core.managers.UserManager;
      import org.bigbluebutton.main.events.BBBEvent;
      import org.bigbluebutton.main.events.ShortcutEvent;
      import org.bigbluebutton.modules.phone.PhoneOptions;
      import org.bigbluebutton.modules.phone.events.CallEchoTestAppEvent;
      import org.bigbluebutton.modules.phone.events.FlashEchoTestHasAudioEvent;
      import org.bigbluebutton.modules.phone.events.FlashEchoTestNoAudioEvent;
      import org.bigbluebutton.modules.phone.events.FlashStartEchoTestCommand;
      import org.bigbluebutton.modules.phone.events.FlashStopEchoTestCommand;
      import org.bigbluebutton.util.i18n.ResourceUtil;
			
      private static const LOG:String = "Phone::FlashMicSettings - ";
      
			[Embed(source="assets/audio-test.mp3")]
			[Bindable] private var soundClass:Class;
			private var sound:Sound = new soundClass() as Sound;			
			private var soundChannel:SoundChannel;
			
			private var micActivityTimer:Timer;
			private var mic:Microphone;
			private var audioMicLevelDetected:int = 0;
			private var playingAudio:Boolean = false;
			private var images:Images = new Images();

			[Bindable] private var cancelIcon:Class = images.cancel;

			[Bindable] private var microphoneList:Array = Microphone.names;      
			[Bindable] private var baseIndex:int = 1;
      private var doingEchoTest:Boolean = false;
      
      private var my_nc:NetConnection;      
      private var nsStream:NetStream;
      
			override public function move(x:Number, y:Number):void {
				return;
			}
			
			private function selectMicrophone(event:Event):void {				        
				testMicrophoneLoopback();
			}
			
      private function reInitialize():void {
        nsStream.attachAudio(null);
        if (mic != null) {
          mic.removeEventListener(StatusEvent.STATUS, micStatusEventHandler);
        }
        
        if (micActivityTimer != null && micActivityTimer.running) {
          micActivityTimer.stop();
        }
        
        mic = null;       
      }
      
			private function testMicrophoneLoopback():void {
        reInitialize();
        
        mic = Microphone.getMicrophone(comboMicList.selectedIndex);
        trace(LOG + "Changing microphone. mic.index[" + mic.index + "] name=[" + mic.name + "]");
        mic.addEventListener(StatusEvent.STATUS, micStatusEventHandler)
        nsStream.attachAudio(mic);  
				
        audioMicLevelDetected = 0;     
			}
      
      private function micStatusEventHandler(event:StatusEvent):void {					
        switch(event.code) {
          case "Microphone.Muted":						
            trace(LOG + "Access to microphone has been denied.");
            statusText.text = "You did not allow Flash to access your mic.";
            break;
          case "Microphone.Unmuted":         
            trace(LOG + "Access to the microphone has been allowed.");
            mic.setLoopBack(true);
            mic.setUseEchoSuppression(true);   
            //http://stackoverflow.com/questions/2936925/no-mic-activity-with-setloopback-set-to-false-as3
            //http://groups.yahoo.com/neo/groups/flexcoders/conversations/topics/144047
            mic.gain = micRecordVolume.value;
            startMicLevelListener();
            statusText.text = "Please speak to your mic to see f you get a green bar.";
            break;
          default:
            LogUtil.debug("unknown micStatusHandler event: " + event);
        }
      }	
      
      private function startMicLevelListener():void {
        micActivityTimer = new Timer(100);
        micActivityTimer.addEventListener(TimerEvent.TIMER, updateMicLevel);
        micActivityTimer.start();          
      }
      
			private function onCreationComplete():void {
        trace(LOG + "onCreationComplete. Seeting state to [flashMicSettingsTest]");
        setupForMicLoopbackTest();
			}						

      private function setupForMicLoopbackTest():void {
        my_nc = new NetConnection();
        my_nc.connect(null);
        nsStream = new NetStream(my_nc);
        
        setCurrentState("flashMicSettingsTest");
        
        var tempArr:Array = new Array();
        tempArr.push("0%", ResourceUtil.getInstance().getString('bbb.micSettings.micRecordVolume.label'),"100%");
        micRecordVolume.labels = tempArr;		        
      }
      
      private function setupForEchoTest():void {
        setCurrentState("flashEchoTestState");
      }
      
			// Added by Chad to enable closing the window without clicking the X
			private function handleKeyDown(event:KeyboardEvent):void {
				if (event.charCode == Keyboard.ESCAPE) {
					this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				}
			}
								
			private function updateMicLevel(e:TimerEvent):void{
				if (mic != null) {
					if (mic.activityLevel > audioMicLevelDetected) {
						audioMicLevelDetected = mic.activityLevel;
					}
					micLevel.setProgress(mic.activityLevel, 100);					
				}
			}
			
			public function playButtonClickHandler():void {
				if (playButton.selected) {
					soundChannel = sound.play();  
          soundChannel.addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);
					playingAudio = true;
				} else {
					soundChannel.stop();
					playButton.label = ResourceUtil.getInstance().getString('bbb.micSettings.playSound');
					playingAudio = false;
				}	                     
			}
 
      private function soundCompleteHandler(e:Event):void {
        playingAudio = false;
        playButton.selected = false;
      }
      
			private function onJoinClicked():void {			
        // Do one last check for if the mic has been allowed.
        // This must come first because cleanUp() will destroy mic 
        if (mic != null && mic.muted) {
            Security.showSettings(SecurityPanel.PRIVACY);
        }        
        if (audioMicLevelDetected > 0){
          joinConference();
        }           	
			}	
			  
      private function echoTestButtonClickHandler():void {
        if (echoTestButton.selected) {
          comboMicList.enabled = false;
          doingEchoTest = true;          
          dispatchEvent(new FlashStartEchoTestCommand(mic.index, mic.name));	
        } else {
          doingEchoTest = false;
          comboMicList.enabled = true;
          dispatchEvent(new FlashStopEchoTestCommand());
        }
      }
      
			public function joinConference():void{			
				var joinEvent:BBBEvent = new BBBEvent("JOIN_VOICE_CONFERENCE_EVENT");
				joinEvent.payload['useMicrophone'] = true;
        joinEvent.payload['microphoneIndex'] = mic == null ? 0 : mic.index;
        joinEvent.payload['callDestination'] = UserManager.getInstance().getConference().voiceBridge;

				dispatchEvent(joinEvent);	

				// Do one last check for if the mic has been allowed.
				// This must come first because cleanUp() will destroy mic 
				if (mic != null && mic.muted) {
					Security.showSettings(SecurityPanel.PRIVACY);
				}
  			cleanUp();      
				PopUpManager.removePopUp(this);			
			}
						
			private function onCancelClicked():void {
				cleanUp();
				var event:BBBEvent = new BBBEvent(BBBEvent.MIC_SETTINGS_CLOSED);
				event.payload['clicked'] = "cancel";
				dispatchEvent(event);
				PopUpManager.removePopUp(this);
			}
			
			private function cleanUp():void {				
				if (micActivityTimer) micActivityTimer.stop();

				if (playingAudio) soundChannel.stop();								

				if (mic) {
					mic.setLoopBack(false);
					mic = null;
				}
			}
			     
			private function changeRecordVolume(event:SliderEvent):void {
				var currentSlider:Slider=Slider(event.currentTarget);
				mic.gain = currentSlider.value
			}
			
			private var DEFAULT_HELP_URL:String = "http://www.bigbluebutton.org/content/videos";			
      
			private function onHelpButtonClicked():void {
				DEFAULT_HELP_URL =  BBB.initConfigManager().config.help.url;
				navigateToURL(new URLRequest(DEFAULT_HELP_URL));
			}
     
      private function yesButtonClicked():void {
        trace(LOG + "Echo test passed.");
        dispatchEvent(new FlashEchoTestHasAudioEvent());
        onCancelClicked();
      }
      
      private function noButtonClicked():void {
        trace(LOG + "Echo test failed.");
        dispatchEvent(new FlashEchoTestNoAudioEvent());
        onCancelClicked();
      }
      
      private function flashMicSettingsCreated():void {        
        trace(LOG + "Available microphones: " + microphoneList);         
        testMicrophoneLoopback();				         
      }
      
		]]>
	</mx:Script>
	
  <mx:states>
    <mx:State name="flashEchoTestState">
      <mx:AddChild relativeTo="statusText" position="after">
        <mx:VBox width="100%" height="100%">          
          <mx:HBox width="100%">      
            <mx:Text width="100%" text="{ResourceUtil.getInstance().getString('bbb.micSettings.speakIntoMic')}"
                   styleName="micSettingsWindowSpeakIntoMicLabelStyle" />		
          </mx:HBox>
          <mx:HBox width="100%">
            <mx:Text width="100%" text="{ResourceUtil.getInstance().getString('bbb.micSettings.hearFromHeadset')}"
                   styleName="micSettingsWindowHearFromHeadsetLabelStyle"/>	
          </mx:HBox>
          <mx:HRule width="100%"/>
          <mx:Spacer height="10"/>
          <mx:HBox width="100%" horizontalAlign="right" horizontalGap="18">
            <mx:Button id="yesButton" label="Yes" 
                     click="yesButtonClicked()" styleName="micSettingsWindowPlaySoundButtonStyle"
                     toolTip=""/>
            <mx:Button id="noButton" 
                     label="No" 
                     styleName="micSettingsWindowPlaySoundButtonStyle"
                     click="noButtonClicked()" 
                     toolTip=""/>
          </mx:HBox>
        </mx:VBox> 
      </mx:AddChild>
    </mx:State>
        
    <mx:State name="flashMicSettingsTest">
      <mx:AddChild relativeTo="statusText" position="after" >
        <!-- Flash Microphone -->
        <mx:VBox width="100%" height="100%" creationComplete="flashMicSettingsCreated()">
            <mx:HBox>
              <mx:ComboBox id="comboMicList" 
                           dataProvider="{microphoneList}" change="selectMicrophone(event)"
                           height="30" tabIndex="{baseIndex+2}" 
                           toolTip="{ResourceUtil.getInstance().getString('bbb.micSettings.comboMicList.toolTip')}" />
              <mx:HSlider id="micRecordVolume" 
                          maximum="100" snapInterval="1"                       
                          labels="[0%,{ResourceUtil.getInstance().getString('bbb.micSettings.micRecordVolume.label')},100%]"
                          tickInterval="10" liveDragging="true" change="changeRecordVolume(event);"
                          showTrackHighlight="true" trackColors="[ 0xEEEEEE, 0xFFFFFF ]"
                          value="60" tabIndex="{baseIndex+3}" 
                          toolTip="{ResourceUtil.getInstance().getString('bbb.micSettings.micRecordVolume.toolTip')}" />                           
            </mx:HBox>
            <mx:ProgressBar id="micLevel" minimum="0" maximum="100" direction="right" label=""
                            mode="manual" visible="true" width="450" height="27" trackHeight="25" verticalGap="-20" 
                            tabIndex="{baseIndex+4}" />
        </mx:VBox>
       
      </mx:AddChild>     
    </mx:State>
  </mx:states>
  
	<mx:VBox id="foo" width="100%" height="100%"  paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">          
        <!-- Audio Settings Title and help button -->
		    <mx:Canvas width="100%" id="flashMicSettingsTitle">
			    <mx:TextArea borderSkin="{null}"
                   text="{ResourceUtil.getInstance().getString('bbb.users.settings.audioSettings')}"
	                 editable="false" styleName="micSettingsWindowTitleStyle" tabIndex="{baseIndex}"
      						 width="400" left="0"/>
			    <mx:LinkButton toolTip="{ResourceUtil.getInstance().getString('bbb.mainToolbar.helpBtn')}"
    						   label="?" styleName="micSettingsWindowHelpButtonStyle" right="0"
          			   height="22" click="onHelpButtonClicked()" tabIndex="{baseIndex+1}"
          			   accessibilityName="{ResourceUtil.getInstance().getString('bbb.micSettings.access.helpButton')}"/>
		    </mx:Canvas>
        <mx:HBox width="100%">
          <mx:Text width="100%" text="Recommend you use a headset or earbuds. Otherwise, you will create echo."
                   styleName="micSettingsWindowSpeakIntoMicLabelStyle" />		
          <mx:Image source="@Embed('assets/headset-earbuds.png')"/>          
        </mx:HBox>
	  
        <mx:HRule width="100%"/>
        <mx:Text id="statusText" width="100%" text="Please select a microphone that generates a colored bar."
                 styleName="micSettingsWindowHearFromHeadsetLabelStyle"/>
    
    
        <!-- Play Sound, Join and Cancel buttons -->
        <mx:HRule width="100%"/>
        <mx:Spacer height="10"/>
        <mx:HBox width="100%" horizontalAlign="right" horizontalGap="18">
          <mx:Button id="echoTestButton" label="Echo Test" 
                 click="echoTestButtonClickHandler()" toggle="true" styleName="micSettingsWindowPlaySoundButtonStyle"
                 toolTip="{ResourceUtil.getInstance().getString('bbb.micSettings.playSound.toolTip')}"/>
          <mx:Button id="playButton" label="{ResourceUtil.getInstance().getString('bbb.micSettings.playSound')}" 
                 click="playButtonClickHandler()" toggle="true" styleName="micSettingsWindowPlaySoundButtonStyle"
                 toolTip="{ResourceUtil.getInstance().getString('bbb.micSettings.playSound.toolTip')}"
                 tabIndex="{baseIndex+7}" />
          <mx:Button id="cancelBtn" label="{ResourceUtil.getInstance().getString('bbb.micSettings.cancel')}" 
                 styleName="micSettingsWindowCancelButtonStyle"
                 click="onCancelClicked()" tabIndex="{baseIndex+9}"
                 toolTip="{ResourceUtil.getInstance().getString('bbb.micSettings.cancel.toolTip')}"/>
        </mx:HBox> 

		</mx:VBox>		

		
</mx:TitleWindow>
