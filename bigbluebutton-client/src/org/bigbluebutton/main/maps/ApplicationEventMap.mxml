<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, If not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<EventMap xmlns="http://mate.asfusion.com/" xmlns:mx="http://www.adobe.com/2006/mxml">

	<!--
	This is the main event map for the application, think of it as the application controller.
	-->
	<EventHandlers type="{FlexEvent.PREINITIALIZE}">
		<!--
		The FlexEvent.PREINITIALIZE event is a good place for creating and initializing managers.
		-->
		<ObjectBuilder generator="{ModulesManager}">
			<Properties dispatcher="{scope.dispatcher}"/>
		</ObjectBuilder>
		<ObjectBuilder generator="{ModulesProxy}" cache="global" />
	</EventHandlers>
	
	<EventHandlers type="{FlexEvent.CREATION_COMPLETE}">        
        <EventAnnouncer generator="{ModeEvent}" type="{ModeEvent.MODE_INIT_EVENT}">
            <Properties mode="{lastReturn}" />
        </EventAnnouncer>
    </EventHandlers>

	<EventHandlers type="{ModeEvent.MODE_INIT_EVENT}">
        <HTTPServiceInvoker instance="{configService}">
			<resultHandlers>
				<EventAnnouncer generator="{ConfigEvent}" type="{ConfigEvent.CONFIG_LOADED_EVENT}">
            		<Properties numberOfModules="{lastReturn.numberOfModules}" moduleDescriptors="{lastReturn.moduleDescriptors}"/>
        		</EventAnnouncer>
			</resultHandlers>
		</HTTPServiceInvoker>   
    </EventHandlers>

	<EventHandlers type="{ConfigEvent.CONFIG_LOADED_EVENT}">
		<MethodInvoker generator="{ModulesManager}" method="numberOfModules" arguments="{event.numberOfModules}"/>
		<MethodInvoker generator="{ModulesManager}" method="moduleDescriptors" arguments="{event.moduleDescriptors}"/>
		<MethodInvoker generator="{ModulesManager}" method="loadFirstModule"/>
	</EventHandlers>
	
	<EventHandlers type="{ModuleEvent.MODULE_LOADED_EVENT}">
		<MethodInvoker generator="{StatusManager}" method="setLoadedModuleStatus" arguments="{[event.moduleName]}"/>
		<MethodInvoker generator="{ModulesManager}" method="loadNextModule" arguments="{[event.moduleName]}"/>
	</EventHandlers>
	
	<EventHandlers type="{ModuleEvent.MODULE_LOAD_PROGRESS_EVENT}">
		<MethodInvoker generator="{StatusManager}" method="setLoadingStatus" arguments="{[event.moduleName,event.percentLoaded]}"/>
	</EventHandlers>
	
	<!-- We set the priority to 20 so it gets executed before the other handlers (e.g. in AppEventMapMock)-->
	<EventHandlers type="{ModuleEvent.ALL_MODULES_LOADED_EVENT}" priority="20">
		<MethodInvoker generator="{StatusManager}" method="clear"/>		
		<HTTPServiceInvoker instance="{joinService}">
			<resultHandlers>
				<EventAnnouncer generator="{ParticipantJoinEvent}" type="{ParticipantJoinEvent.PARTICIPANT_JOINED_EVENT}">
            		<Properties participant="{lastReturn}"/>
        		</EventAnnouncer>
			</resultHandlers>
		</HTTPServiceInvoker> 
	</EventHandlers>
	
	<EventHandlers type="{ParticipantJoinEvent.PARTICIPANT_JOINED_EVENT}">
		<EventAnnouncer generator="{ConnectedEvent}" type="{ConnectedEvent.CONNECTED_EVENT}">
            <Properties participant="{event.participant}"/>
        </EventAnnouncer>
	</EventHandlers>
	
	<EventHandlers type="{PortTestEvent.TEST_RTMP}" >
		<MethodInvoker generator="{ModulesProxy}" method="testRTMP" arguments="{event}" />
	</EventHandlers>

	<EventHandlers type="{PortTestEvent.PORT_TEST_SUCCESS}" >
		<MethodInvoker generator="{ModulesProxy}" method="portTestSuccess" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{PortTestEvent.PORT_TEST_FAILED}" >
		<MethodInvoker generator="{ModulesProxy}" method="testRTMPT" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{LogoutEvent.USER_LOGGED_OUT}" >
		<MethodInvoker generator="{ModulesProxy}" method="handleLogout" />
	</EventHandlers>
	
	<EventHandlers type="{LoginSuccessEvent.LOGIN_SUCCESS}" >
		<MethodInvoker generator="{ModulesProxy}" method="handleLogin" arguments="{event}" />
	</EventHandlers>

	<mx:Script>
	<![CDATA[
		import mx.events.FlexEvent;
		
		import org.bigbluebutton.main.events.AppEvent;
		import org.bigbluebutton.main.events.ConfigEvent;
		import org.bigbluebutton.main.events.ConnectedEvent;
		import org.bigbluebutton.main.events.LogoutEvent;
		import org.bigbluebutton.main.events.ModeEvent;
		import org.bigbluebutton.main.events.ModuleEvent;
		import org.bigbluebutton.main.events.ModuleLoadEvent;
		import org.bigbluebutton.main.events.ParticipantJoinEvent;
		import org.bigbluebutton.main.events.PortTestEvent;
		import org.bigbluebutton.main.managers.ModulesManager;
		import org.bigbluebutton.main.managers.StatusManager;
		import org.bigbluebutton.main.model.ModulesProxy;
		import org.bigbluebutton.main.model.PortTestProxy;
		import org.bigbluebutton.modules.viewers.events.LoginSuccessEvent;
	]]>
	</mx:Script>
	
	<Debugger level="{Debugger.ALL}"/>

    <!-- ======================================================================================== -->
    <!-- Services   Note: you can have an external file if you have more services -->
    <!-- _________________________________________________________________________________________ -->
    
    <mx:HTTPService id="configService" url="conf/config.xml" resultFormat="e4x" />
	<mx:HTTPService id="joinService" url="conf/joinResultMock.xml" resultFormat="e4x" />	
</EventMap>
