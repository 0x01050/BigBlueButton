<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:Canvas xmlns="org.bigbluebutton.common.*"
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:common="org.bigbluebutton.common.*"
	width="100%" height="100%"
	initialize="init()"
	creationComplete="onCreationComplete()"
	implements="org.bigbluebutton.common.IBbbCanvas"
	xmlns:mate="http://mate.asfusion.com/"
	backgroundColor="#C0C0C0">
	
	<mate:Listener type="{ViewStreamEvent.STOP}" method="onStopViewStreamEvent" />
	<mate:Listener type="{CursorEvent.UPDATE_CURSOR_LOC_EVENT}" method="onUpdateCursorEvent" />
	<mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="localeChanged" />
		
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.core.UIComponent;
			import mx.events.ResizeEvent;
			
			import flexlib.mdi.events.MDIWindowEvent;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.IBbbModuleWindow;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.deskshare.events.CursorEvent;
			import org.bigbluebutton.modules.deskshare.events.StartedViewingEvent;
			import org.bigbluebutton.modules.deskshare.events.ViewStreamEvent;
			import org.bigbluebutton.modules.deskshare.events.ViewWindowEvent;
			import org.bigbluebutton.modules.deskshare.model.DeskshareOptions;
			import org.bigbluebutton.modules.deskshare.managers.SmartWindowResizer;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private var images:Images = new Images();
			
			private var cursor:Shape;
			
			private var video:Video;
			private var ns:NetStream;
			private var videoHolder:UIComponent = new UIComponent();
			private var stream:String;
			// these are the original video dimensions
			private var videoHeight:Number;
			private var videoWidth:Number;
			
			[Bindable] private var _actualSize:Boolean = false;

			private static const LOGGER:ILogger = getClassLogger(DesktopViewWindow);      

			private var resizer:SmartWindowResizer = new SmartWindowResizer();
			
			[Bindable] private var dsOptions:DeskshareOptions;

			private var whiteboardCanvas:IBbbCanvas = null;
			private var whiteboardCanvasHolder:Canvas = new Canvas();
			private var fullScreen:Boolean = false;

			private var fullScreenWidth:Number = 1;
			private var fullScreenHeight:Number = 1;
			private var windowedWidth:Number = 1;
			private var windowedHeight:Number = 1;
									
			private function init():void{
				dsOptions = new DeskshareOptions();
			}
									
			private function onCreationComplete():void{
				addEventListener(ResizeEvent.RESIZE, onResizeEvent);
				this.addChildAt(videoHolder,0);
				videoHolder.percentWidth = 100;
				videoHolder.percentHeight = 100;
				cursor = new Shape();
				cursor.graphics.lineStyle(6, 0xFF0000, 0.6);
				cursor.graphics.drawCircle(0,0,3);
				videoHolder.addChild(cursor);
				videoHolder.addChild(cursorImg);
				cursor.visible = false;
				
				resourcesChanged();
				onResizeEvent();
			}
			
			private function onResizeEvent(e:ResizeEvent = null):void {
				LOGGER.debug("DesktopViewWindow::onResizeEvent");
				if (actualSize) {
					onResizeCallback(this.width, this.height, videoWidth, videoHeight, Math.max((this.width - videoWidth) / 2, 0), Math.max((this.height - videoHeight) / 2, 0));
				} else {
					resizer.onResize(this.width, this.height, false, video.width, video.height, videoWidth / videoHeight, false, onResizeCallback);
				}
			}

			public function onParentResized(width:Number, height:Number):void {
				onResizeEvent();
			}

			private function onResizeCallback(externalWidth:int, externalHeight:int, internalWidth:int, internalHeight:int, internalOffsetX:int, internalOffsetY:int):void {
				// do not modify the external canvas dimensions
				// this.width = externalWidth;
				// this.height = externalHeight;

				/* Reposition video within window */
				videoHolder.x = internalOffsetX;
				videoHolder.y = internalOffsetY;

				videoHolder.width = video.width = internalWidth;
				videoHolder.height = video.height = internalHeight;

				// update the whiteboard canvas holder and overlay with new video dimensions
				updateWhiteboardCanvasHolder();
				updateWhiteboardCanvasOverlay();
			}

			private function onUpdateCursorEvent(event:CursorEvent):void {	
				if(cursor == null)
					return;

				cursor.x = ((event.x/videoWidth)) * video.width;
				cursor.y = ((event.y/videoHeight)) * video.height;
			
				cursorImg.visible = true;
				// DO NOT compute the x and y coordinate and assign directly to the cursorImg
				// as it results in a flickering and jerky mouse pointer (ralam jun 10, 2010).
				if (cursor.x < video.x) cursor.x = video.x;
				if (cursor.y < video.y) cursor.y = video.y;
				if (cursor.x > video.x + video.width) cursor.x = video.x + video.width;
				if (cursor.y > video.y + video.height) cursor.y = video.y + video.height;
				cursorImg.move(cursor.x, cursor.y);
			}
			
			public function startVideo(connection:NetConnection, stream:String, width:Number, height:Number):void{
				this.videoWidth = width;
				this.videoHeight = height;
				
				ns = new NetStream(connection);
				ns.addEventListener( NetStatusEvent.NET_STATUS, onNetStatus );
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);
				ns.client = this;
				ns.bufferTime = 0;
				ns.receiveVideo(true);
				ns.receiveAudio(false);
				
				video = new Video(width, height);
				video.width = width;
				video.height = height;
				video.smoothing = true;
				video.attachNetStream(ns);
				ns.play(stream);	
				this.stream = stream;

				videoHolder.addChild(video);
				onResizeEvent();
			}
			
			public function onMetaData(info:Object):void {
				LOGGER.debug("onMetaData width=" + info.width + " height=" + info.height);
			}

			private function addWhiteboardCanvasHolder():void{
				if(video != null) {
					cleanCanvasHolder();
					this.addChildAt(whiteboardCanvasHolder, 1);
					LOGGER.debug("Whiteboard canvas holder added");
				}
			}

			private function cleanCanvasHolder():void{
				while (this.whiteboardCanvasHolder.rawChildren.numChildren > 0) {
					this.whiteboardCanvasHolder.rawChildren.removeChildAt(0);
				}
			}

			private function updateWhiteboardCanvasHolder():void{
				if (video != null) {
					whiteboardCanvasHolder.x = videoHolder.x;
					whiteboardCanvasHolder.y = videoHolder.y;
					whiteboardCanvasHolder.width = videoHolder.width;
					whiteboardCanvasHolder.height = videoHolder.height;
					LOGGER.debug("Whiteboard canvas holder dimensions updated");
				}
			}

			public function addWhiteboardCanvasOverlay():void {
				updateWhiteboardCanvasOverlay();
				if (video != null && whiteboardCanvas != null) {
					this.addChild(whiteboardCanvas as Canvas);
					LOGGER.debug("Whiteboard Canvas OVERLAY added.");
				}
				else {
					LOGGER.error("COULD NOT add whiteboard overlay");
				}
			}

			private function updateWhiteboardCanvasOverlay():void{
				if (video != null && whiteboardCanvas != null) {
					whiteboardCanvas.moveCanvas(videoHolder.x, videoHolder.y);

					var zoomPercentage:Number = (videoHolder.width / videoWidth)*100;
					if(zoomPercentage > 0)
						whiteboardCanvas.zoomCanvas(videoHolder.width, videoHolder.height, zoomPercentage);

					LOGGER.debug("Whiteboard canvas overlay dimensions updated");
				}
			}
			
			public function stopViewing():void {
				if(ns != null) {
					ns.close();
					ns = null;
				}
				closeWindow();
			}
			
			private function onStopViewStreamEvent(event:ViewStreamEvent):void {
				stopViewing();
			}
						
			private function onAsyncError(e:AsyncErrorEvent):void{
				LOGGER.debug("DesktopViewWindow::asyncerror {0}", [e.toString()]);
			}
			
			private function onNetStatus(e:NetStatusEvent):void{
				LOGGER.debug("onNetStatus info={0}", [e.info.text]);
			
				switch(e.info.code){
				case "NetStream.Play.Start":
					LOGGER.debug("NetStream.Publish.Start for broadcast stream {0}", [stream]);
					LOGGER.debug("Dispatching start viewing event");
					var dispatcher: Dispatcher  = new Dispatcher();
					var viewEvent:StartedViewingEvent = new StartedViewingEvent(StartedViewingEvent.STARTED_VIEWING_EVENT);
					viewEvent.stream = stream;
					dispatcher.dispatchEvent(viewEvent);
					break;
				case "NetStream.Play.UnpublishNotify":
					LOGGER.debug("NetStream.Play.UnpublishNotify for broadcast stream {0}", [stream]);
					stopViewing();
					break;
				}
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.DESKTOP_SHARING_VIEW;
			}
			
			private function toggleActualSize():void {
				actualSize = !actualSize;
			}
			
			public function set actualSize(value:Boolean):void {
				_actualSize = value;
				onResizeEvent();
			}
			
			public function get actualSize():Boolean {
				return _actualSize;
			}
			
			private function closeWindow():void {
				dispatchEvent(new ViewWindowEvent(ViewWindowEvent.CLOSE));
			}
			
			override protected function resourcesChanged():void{
				super.resourcesChanged();
			}
			
			private function localeChanged(e:Event):void{
				resourcesChanged();
			}

			/** Inherited from IBbbCanvas*/
			public function addRawChild(child:DisplayObject):void{
				whiteboardCanvasHolder.rawChildren.addChild(child);
			}

			public function removeRawChild(child:DisplayObject):void{
				this.whiteboardCanvasHolder.rawChildren.removeChild(child);
			}

			public function doesContain(child:DisplayObject):Boolean{
				return this.whiteboardCanvasHolder.rawChildren.contains(child);
			}

			public function acceptOverlayCanvas(overlay:IBbbCanvas):void{
				LOGGER.debug("DesktopViewWindow: acceptOverlayCanvas");
				whiteboardCanvas = overlay;
				addWhiteboardCanvasHolder();
				addWhiteboardCanvasOverlay();
				onResizeEvent();
			}

			private function handleWhiteboardCanvasClick(e:MouseEvent):void {
				LOGGER.debug("DesktopPublishWindow: handleWhiteboardCanvasClick");
			}

			public function moveCanvas(x:Number, y:Number):void{
				LOGGER.debug("DesktopPublishWindow: moveCanvas");
			}

			public function zoomCanvas(width:Number, height:Number, zoom:Number):void{
				LOGGER.debug("DesktopPublishWindow: zoomCanvas");
			}

			public function showCanvas(show:Boolean):void{
				LOGGER.debug("DesktopPublishWindow: showCanvas");
			}
		]]>
	</mx:Script>

	<mx:Image id="cursorImg" visible="false" source="@Embed('../../assets/images/cursor4.png')"/>
</mx:Canvas>
