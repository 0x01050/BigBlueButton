<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:VBox xmlns="org.bigbluebutton.common.*"
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:common="org.bigbluebutton.common.*"
    width="600" height="400"
	initialize="init()"
	creationComplete="onCreationComplete()"
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	xmlns:mate="http://mate.asfusion.com/"
	backgroundColor="#C0C0C0">
	
	<mate:Listener type="{ViewStreamEvent.STOP}" method="onStopViewStreamEvent" />
	<mate:Listener type="{CursorEvent.UPDATE_CURSOR_LOC_EVENT}" method="onUpdateCursorEvent" />
	<mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="localeChanged" />
		
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.core.UIComponent;
			import mx.events.ResizeEvent;
			
			import flexlib.mdi.events.MDIWindowEvent;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.IBbbModuleWindow;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.deskshare.events.CursorEvent;
			import org.bigbluebutton.modules.deskshare.events.StartedViewingEvent;
			import org.bigbluebutton.modules.deskshare.events.ViewStreamEvent;
			import org.bigbluebutton.modules.deskshare.events.ViewWindowEvent;
			import org.bigbluebutton.modules.deskshare.model.DeskshareOptions;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private var screenHeight:Number = Capabilities.screenResolutionY;
			private var screenWidth:Number = Capabilities.screenResolutionX;
						
			private var images:Images = new Images();
			[Bindable] public var fitToWidthIcon:Class = images.magnifier;
			[Bindable] public var fitToActualSizeIcon:Class = images.mag_reset;
			
			private var cursor:Shape;
			
			private var video:Video;
			private var ns:NetStream;
			private var videoHolder:UIComponent = new UIComponent();
			private var stream:String;
			private var videoHeight:Number;
			private var videoWidth:Number;
			
			private static const LOGGER:ILogger = getClassLogger(DesktopViewWindow);      

			private static const VIDEO_WIDTH_PADDING:int = 7;
			private static const VIDEO_HEIGHT_PADDING:int = 65;

			// The following code block is to deal with a bug in FLexLib 
			// with MDI windows not responding well to being maximized
			private var savedWindowWidth:Number;
			private var savedWindowHeight:Number;
			private var savedX:Number;
			private var savedY:Number;
			private var isMaximized:Boolean = false;
			
			[Bindable] private var dsOptions:DeskshareOptions;
									
			private function init():void{
				dsOptions = new DeskshareOptions();
			}
									
			private function onCreationComplete():void{
				videoHolder.addChild(video);				
				videoHolder.addEventListener(ResizeEvent.RESIZE, onResize);
				this.addChild(videoHolder);
				videoHolder.percentWidth = 100;
				videoHolder.percentHeight = 100;
				fitVideoToWindow();
				cursor = new Shape();
				cursor.graphics.lineStyle(6, 0xFF0000, 0.6);
				cursor.graphics.drawCircle(0,0,3);
				videoHolder.addChild(cursor);
				videoHolder.addChild(cursorImg);
				cursor.visible = false;
				
				resourcesChanged();
			}
			
			private function onResize(e:ResizeEvent):void {
				determineHowToDisplayVideo();
			}
			
			private function onUpdateCursorEvent(event:CursorEvent):void {	
				if(cursor == null)
				   return;

				cursor.x = ((event.x/videoWidth)) * videoHolder.width;
				cursor.y = ((event.y/videoHeight)) * videoHolder.height;
			
				cursorImg.visible = true;
                // DO NOT compute the x and y coordinate and assign directly to the cursorImg
                // as it results in a flickering and jerky mouse pointer (ralam jun 10, 2010).
                if (cursor.x < videoHolder.x) cursor.x = videoHolder.x;
                if (cursor.y < videoHolder.y) cursor.y = videoHolder.y;
                if (cursor.x > videoHolder.x + videoHolder.width) cursor.x = videoHolder.x + videoHolder.width;
                if (cursor.y > videoHolder.y + videoHolder.height) cursor.y = videoHolder.y + videoHolder.height;
                cursorImg.x = cursor.x;
                cursorImg.y = cursor.y;
			}
			
			public function startVideo(connection:NetConnection, stream:String, width:Number, height:Number):void{
				this.videoWidth = width;
				this.videoHeight = height;
				
				ns = new NetStream(connection);
				ns.addEventListener( NetStatusEvent.NET_STATUS, onNetStatus );
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);
				ns.client = this;
				ns.bufferTime = 0;
				ns.receiveVideo(true);
				ns.receiveAudio(false);
				
				video = new Video(width, height);
				video.width = width;
				video.height = height;
        		video.smoothing = true;
				video.attachNetStream(ns);
				ns.play(stream);	
				this.stream = stream;
				
			}
			
      protected function updateButtonsPosition():void {
        if (this.width < bottomBar.width) {
          bottomBar.visible = false;
        }
        
        if (bottomBar.visible == false) {
          bottomBar.y = bottomBar.x = 0;
        } else {
          bottomBar.y = (this.height - bottomBar.height) / 2;
          bottomBar.x = (this.width - bottomBar.width) / 2;
        }
      }
      
			public function stopViewing():void {
				ns.close();
				closeWindow();				
			}
			
			private function onStopViewStreamEvent(event:ViewStreamEvent):void {
				stopViewing();
			}
						
			private function onAsyncError(e:AsyncErrorEvent):void{
				LOGGER.debug("VIdeoWindow::asyncerror {0}", [e.toString()]);
			}
			
			private function onNetStatus(e:NetStatusEvent):void{
				LOGGER.debug("onNetStatus info={0}", [e.info.text]);
			
				switch(e.info.code){
				case "NetStream.Play.Start":
					LOGGER.debug("NetStream.Publish.Start for broadcast stream {0}", [stream]);
					LOGGER.debug("Dispatching start viewing event");
					var dispatcher: Dispatcher  = new Dispatcher();
        			var viewEvent:StartedViewingEvent = new StartedViewingEvent(StartedViewingEvent.STARTED_VIEWING_EVENT);
        			viewEvent.stream = stream;
					dispatcher.dispatchEvent(viewEvent);
					break;
				case "NetStream.Play.UnpublishNotify":
					LOGGER.debug("NetStream.Play.UnpublishNotify for broadcast stream {0}", [stream]);
					stopViewing();
					break;
				}
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.DESKTOP_SHARING_VIEW;
			}
												
			private function fitVideoToWindow():void {
				videoHolder.percentWidth = 100;
				videoHolder.percentHeight = 100;
				
				const videoAspectRatio:Number = videoWidth / videoHeight;
				const windowAspectRatio:Number = videoHolder.width / videoHolder.height;
				if (videoAspectRatio > windowAspectRatio) {
					video.width = videoHolder.width;
					video.height = Math.floor(video.width / videoAspectRatio);
					video.x = 0;
					video.y = (videoHolder.height - video.height) / 2;
				} else {
					video.height = videoHolder.height;
					video.width = Math.floor(video.height * videoAspectRatio);
					video.y = 0;
					video.x = (videoHolder.width - video.width) / 2;
				}
			}
						
			/**
			 * resizes the desktop sharing video to actual video resolution
			 */
			private function fitToActualSize():void{
				videoHolder.width = Math.max(this.width, videoWidth);
				videoHolder.height = Math.max(this.height, videoHeight);

				video.width = videoWidth;
				video.height = videoHeight;
				video.x = Math.max(videoHolder.width - videoWidth, 0);
				video.y = Math.max(videoHolder.height - videoHeight, 0);
			}
			
			private function determineHowToDisplayVideo():void {
				if (btnActualSize.selected) {
					fitToActualSize();			
					btnActualSize.toolTip = ResourceUtil.getInstance().getString('bbb.desktopView.fitToWindow');	
					btnActualSize.label = ResourceUtil.getInstance().getString('bbb.desktopView.fitToWindow');
				} else {
					fitVideoToWindow();
					btnActualSize.toolTip = ResourceUtil.getInstance().getString('bbb.desktopView.actualSize');
					btnActualSize.label = ResourceUtil.getInstance().getString('bbb.desktopView.actualSize');
				}
			}
			
			private function closeWindow():void {
				dispatchEvent(new ViewWindowEvent(ViewWindowEvent.CLOSE));
			}
			
			override protected function resourcesChanged():void{
				super.resourcesChanged();
			}
			
			private function localeChanged(e:Event):void{
				resourcesChanged();
			}
			
		]]>
	</mx:Script>

	<common:TabIndexer startIndex="{dsOptions.baseTabIndex + 1}" tabIndices="{btnActualSize}"/>

	<mx:Move id="cursorMove" target="{cursorImg}"/>
	<mx:Image id="cursorImg" visible="false" source="@Embed('../../assets/images/cursor4.png')"/>
		
	<mx:HBox id="bottomBar" visible="true" height="30" horizontalAlign="center" paddingTop="0" paddingBottom="0" width="100%" >
		<mx:Button id="btnActualSize" paddingTop="0" paddingBottom="0" styleName="deskshareControlButtonStyle"
				   toggle="true" 
				   click="determineHowToDisplayVideo()" 
				   selected="false"
				   height="90%" 
				   label="{btnActualSize.selected ? ResourceUtil.getInstance().getString('bbb.desktopView.fitToWindow') : ResourceUtil.getInstance().getString('bbb.desktopView.actualSize')}" 
				   toolTip="{btnActualSize.selected ? ResourceUtil.getInstance().getString('bbb.desktopView.fitToWindow') : ResourceUtil.getInstance().getString('bbb.desktopView.actualSize')}"/>
	</mx:HBox>
</mx:VBox>
