<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, If not, see <http://www.gnu.org/licenses/>.

  Authors: Denis Zgonjanin <me.snap@gmail.com>
           Richard Alam <ritzalam@gmail.com> 
  
  $Id: $
--> 

<dspub:MDIWindow xmlns="flexlib.mdi.containers.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	xmlns:mate="http://mate.asfusion.com/"
	xmlns:dspub="flexlib.mdi.containers.*"
	creationComplete="onCreationComplete()"
	backgroundImage="{bbbLogo}"	
	width="320" height="240"
	title="{ResourceUtil.getInstance().getString('bbb.desktopPublish.title')}"
	resizable="false">
		
	<mate:Listener type="{AppletStartedEvent.APPLET_STARTED}" method="onAppletStart" />
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="onChangedPresenter" />
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="onChangedPresenter" />	
	<mate:Listener type="{CursorEvent.UPDATE_CURSOR_LOC_EVENT}" method="onUpdateCursorEvent" />
	<mate:Listener type="{ViewStreamEvent.STOP}" method="closePublishWindow" />
	
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flexlib.mdi.events.MDIWindowEvent;
			
			import mx.core.UIComponent;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.deskshare.events.AppletStartedEvent;
			import org.bigbluebutton.modules.deskshare.events.CursorEvent;
			import org.bigbluebutton.modules.deskshare.events.ShareWindowEvent;
			import org.bigbluebutton.modules.deskshare.events.StreamEvent;
			import org.bigbluebutton.modules.deskshare.events.ViewStreamEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			public static const SCALE:Number = 5;
			
			private var images:Images = new Images();
			[Bindable] public var bbbLogo:Class = images.bbb_logo;
			[Bindable] private var cursorIcon:Class = images.cursorIcon;
			
			private var connection:NetConnection;
			private var uri:String;
			private var room:String;
			private var sharingFullScreen:Boolean = false;
			private var streaming:Boolean = false;
			
			private var video:Video;
			private var ns:NetStream;
			private var videoHolder:UIComponent;
			private var stream:String;
			private var videoHeight:Number;
			private var videoWidth:Number;
			private var captureHeight:Number = Capabilities.screenResolutionY;
			private var captureWidth:Number = Capabilities.screenResolutionX;
			
			private var globalDispatcher:Dispatcher = new Dispatcher();
			
			[Bindable] private var cursor:Sprite;
			
			private function onCreationComplete():void {
				windowControls.maximizeRestoreBtn.enabled = false;
				windowControls.maximizeRestoreBtn.toolTip = "You cannot maximize this window.";
				windowControls.closeBtn.toolTip = "Stop sharing and close this window.";
				windowControls.minimizeBtn.toolTip = "Minimize this window.";
				
				cursor = new Sprite();
				cursor.graphics.lineStyle(6, 0xFF0000, 0.6);
				cursor.graphics.drawCircle(0,0,3);				
			}
			
			public function get defaultWidth():int{
				return this.width;
			}
			
			public function get defaultHeight():int{
				return this.height;
			}
			
			public function set defaultHeight(height:int):void{
				this.height = height;
			}
			
			public function set defaultWidth(width:int):void{
				this.width = width;
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.DESKTOP_SHARING_PUBLISH;
			}

			/*
			 * Implement resizeable interface.
			 */			
			public function resetWidthAndHeight():void{/* do nothing */}
			
			public function initWindow(connection:NetConnection, uri:String, room:String):void {
				this.connection = connection;
				this.uri = uri;
				this.room = room;								
			}
			
			private function shareScreen(fullScreen:Boolean):void {
				startSharing(connection, uri, room, fullScreen);
			}
			
			private function startSharing(connection:NetConnection, uri:String, room:String, fullScreen:Boolean):void {
				var captureX:Number = 0;
				var captureY:Number = 0;
				
				sharingFullScreen = fullScreen;
				btnFSPublish.visible = false;
				btnRegionPublish.visible = false;
				btnClosePublish.visible = true;
				ExternalInterface.call("startApplet", uri, room, fullScreen);
			}
			
			public function stopSharing():void{
				if (streaming) {
					stopStream();
					var streamEvent:StreamEvent = new StreamEvent(StreamEvent.STOP);
					dispatchEvent(streamEvent);					
				}
				sharingFullScreen = false;
				streaming = false;
					
				
				closeWindow();
			}
			
			private function onUpdateCursorEvent(event:CursorEvent):void {	
				cursor.x = ((event.x/captureWidth)) * videoHolder.width;
				cursor.y = ((event.y/captureHeight)) * videoHolder.height;					
				cursorImg.visible = true;
                // DO NOT compute the x and y coordinate and assign directly to the cursorImg
                // as it results in a flickering and jerky mouse pointer (ralam jun 10, 2010).
                cursorImg.x = cursor.x;
                cursorImg.y = cursor.y;
			}
			
			private function onAppletStart(event:AppletStartedEvent):void{
				LogUtil.debug("DeskShareWindow::onAppletStart");
				startStream(connection, room);
				captureWidth = event.videoWidth;
				captureHeight = event.videoHeight;
				var streamEvent:StreamEvent = new StreamEvent(StreamEvent.START);
				streamEvent.videoWidth = captureWidth;
				streamEvent.videoHeight = captureHeight;
				dispatchEvent(streamEvent);
			}
			
			private function startStream(nc:NetConnection, streamName:String):void{
				LogUtil.debug("DimensionsBox - Starting thumbnail view");
				LogUtil.debug("connection:" + nc.uri + " stream:" + streamName);
				streaming = true;
				
				videoHolder = new UIComponent();
				video = new Video(captureWidth/SCALE, captureHeight/SCALE);
				video.width = captureWidth/SCALE;
				video.height = captureHeight/SCALE;
				videoHolder.width = captureWidth/SCALE;
				videoHolder.height = captureHeight/SCALE;
				videoHolder.addChild(video);
				videoHolder.addChild(cursor);
				videoHolder.addChild(cursorImg);
				cursor.visible = false;
				this.addChild(videoHolder);
				this.width = video.width + 6;
				this.height = video.height + 73;
				
				ns = new NetStream(nc);
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);
				ns.addEventListener( NetStatusEvent.NET_STATUS, onNetStatus );
				ns.client = this;
				ns.bufferTime = 0;
				ns.receiveVideo(true);
				ns.receiveAudio(false);
				video.attachNetStream(ns);
				ns.play(streamName);
			}
			
			private function stopStream():void{
				streaming = false;
				this.removeChild(videoHolder);
				captureHeight = Capabilities.screenResolutionY;
				captureWidth = Capabilities.screenResolutionX;
				ns.close();
			}
			
			private function onAsyncError(e:AsyncErrorEvent):void{
				LogUtil.debug("VIdeoWindow::asyncerror " + e.toString());
			}
			
			private function onNetStatus(e:NetStatusEvent):void{
				switch(e.info.code){
				case "NetStream.Publish.Start":
					LogUtil.debug("NetStream.Publish.Start for broadcast stream " + stream);
					break;
				case "NetStream.Play.UnpublishNotify":
					LogUtil.debug("NetStream.Play.UnpublishNotify for broadcast stream " + stream);
					stopSharing();
					break;
				case "NetStream.Play.Start":
					LogUtil.debug("Netstatus: " + e.info.code);
					globalDispatcher.dispatchEvent(new BBBEvent(BBBEvent.DESKSHARE_STARTED));
				}
			}
			
			private function onChangedPresenter(e:Event):void{
				stopSharing();
				closeWindow();
			}

			private function closeWindow():void {			
				ExternalInterface.call("stopApplet");	
				dispatchEvent(new ShareWindowEvent(ShareWindowEvent.CLOSE));				
			}		
				
			/*
			 * Override the close handler. We want the Event Map to send a message to
			 * the MDIManager to close this window;
			 */
			override public function close(event:MouseEvent = null):void {
				stopSharing();
				closeWindow();
			}		
			
			override protected function resourcesChanged():void{
				super.resourcesChanged();
				this.title = ResourceUtil.getInstance().getString('bbb.desktopPublish.title');
			}
			
			private function closePublishWindow(event:ViewStreamEvent):void{
				stopStream();
			}
			
		]]>
	</mx:Script>
			
	<mx:Image id="cursorImg" visible="false" source="@Embed('../../assets/images/cursor4.png')"/>
	
	<mx:ControlBar id="bottomBar">
		<mx:Button id="btnFSPublish" toolTip="Share your whole screen" label="Fullscreen" visible="true" click="shareScreen(true)" />
		<mx:Spacer width="50%"/>
		<mx:Button id="btnClosePublish" toolTip="Close screen share" label="Close" visible="false" click="stopSharing()" />
		<mx:Spacer width="50%"/>
		<mx:Button id="btnRegionPublish" toolTip="Share a part of your screen" label="Region" visible="true" click="shareScreen(false)" />
		
	</mx:ControlBar>
</dspub:MDIWindow>
