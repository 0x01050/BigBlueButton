<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:Canvas
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/"
	xmlns:dspub="org.bigbluebutton.common.*"
	creationComplete="onCreationComplete()"	
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	width="365" height="350">
	
	<mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="localeChanged" />
	
	<mx:Script>
		<![CDATA[
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.deskshare.events.ShareWindowEvent;
			import org.bigbluebutton.modules.deskshare.events.StreamEvent;
			import org.bigbluebutton.modules.deskshare.utils.JavaCheck;
			import org.bigbluebutton.modules.deskshare.utils.BrowserCheck;
			
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private static const LOGGER:ILogger = getClassLogger(DesktopPublishWindow);      

			private var connection:NetConnection;
			private var uri:String;
			private var useTLS:Boolean;
			private var room:String;
			private var sharingFullScreen:Boolean = false;
			private var streaming:Boolean = false;
			
			private var videoHeight:Number;
			private var videoWidth:Number;
			public var autoStart:Boolean = false;
			private var javaTimer:Timer;
			
      private var calledStopApplet:Boolean = false;
      
			private function onCreationComplete():void {
				if (BrowserCheck.isUsingLessThanChrome38OnMac()) {
					setCurrentState("chromeOnMacWarningState");
				} else if (BrowserCheck.isUsingEdgePluginUnsupported()) {
					setCurrentState("edgePluginWarningState");
				} else {
					var javaIssue:String = JavaCheck.checkJava();
					
					if (javaIssue != null) {
						if (BrowserCheck.isChrome42OrHigher()) {
							setCurrentState("chrome42WarningState");
						} else if (BrowserCheck.isFirefox52OrHigher()) {
							setCurrentState("firefox52WarningState");
						} else {
							setCurrentState("javaIssueWarningState");
							javaIssueWarningStateLbl.htmlText = javaIssue;
						}
					} else {
						setCurrentState("dispFullRegionControlBar");
					}
				}
				resourcesChanged();
			}

			public function get defaultWidth():int{
				return this.width;
			}
			
			public function get defaultHeight():int{
				return this.height;
			}
			
			public function set defaultHeight(height:int):void{
				this.height = height;
			}
			
			public function set defaultWidth(width:int):void{
				this.width = width;
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.DESKTOP_SHARING_PUBLISH;
			}

			/*
			 * Implement resizeable interface.
			 */			
			public function resetWidthAndHeight():void{/* do nothing */}
			
			public function initWindow(connection:NetConnection, uri:String, useTLS:Boolean , room:String, autoStart:Boolean, autoFullScreen:Boolean):void {
				this.connection = connection;
				this.uri = uri;
				this.useTLS = useTLS;
				this.room = room;				
				this.autoStart = autoStart;
				/*if(autoFullScreen)
					shareScreen(true);*/
			}

			public function shareScreen(fullScreen:Boolean):void {
				LOGGER.debug("Calling shareScreen");
				btnFSPublish.enabled = false;
				btnRegionPublish.enabled = false;
//				useSVC2Check.enabled = false;
				javaTimer = new Timer(7000, 1);
				javaTimer.addEventListener(TimerEvent.TIMER, onJavaTimer);
				javaTimer.start();
				startSharing(connection, uri, useTLS , room, fullScreen);
			}
			
			private function startSharing(connection:NetConnection, uri:String , useTLS:Boolean , room:String, fullScreen:Boolean):void {
				var captureX:Number = 0;
				var captureY:Number = 0;				
				sharingFullScreen = fullScreen;
				LOGGER.debug("Calling startApplet");
				ExternalInterface.call("startApplet", uri , useTLS , room, fullScreen, true /*useSVC2Check.selected*/);
			}
			
			public function stopSharing():void{
				if (streaming) {
					stopStream();
					var streamEvent:StreamEvent = new StreamEvent(StreamEvent.STOP);
					dispatchEvent(streamEvent);					
				}
				sharingFullScreen = false;
				streaming = false;
									
				closeWindow();
			}
			
			private function onJavaTimer(e:TimerEvent):void {
				var browser:Array = ExternalInterface.call("determineBrowser");
				if (browser[0] == "Chrome")
					javaHelpArea.visible = javaHelpArea.includeInLayout = true;
			}

			public function onAppletStart(videoWidth:Number, videoHeight:Number):void{
				if (!connection.connected) return;
				
				LOGGER.debug("DeskShareWindow::onAppletStart");
				streaming = true;
				var streamEvent:StreamEvent = new StreamEvent(StreamEvent.START);
				streamEvent.videoWidth = videoWidth;
				streamEvent.videoHeight = videoHeight;
				dispatchEvent(streamEvent);
			}

			private function stopStream():void{
				streaming = false;
			}

      private function callStopApplet():void {
        if (!calledStopApplet) {
          calledStopApplet = true;
          LOGGER.debug("Calling stopApplet in callStopApplet()");
          ExternalInterface.call("stopApplet");
        }
      }
      private function closeWindow():void {		
		LOGGER.debug("Calling stopApplet in closeWindow()");
        callStopApplet();
        dispatchEvent(new ShareWindowEvent(ShareWindowEvent.CLOSE));				
      }		
      
      private function restartJava():void {
		LOGGER.debug("Calling stopApplet in restartJava()");
        callStopApplet();
        shareScreen(sharingFullScreen);
      }
			
			public function handleDeskshareAppletLaunchedEvent():void {
				if (javaTimer && javaTimer.running) {
					javaTimer.stop();
				}
				if (javaHelpArea != null)
					javaHelpArea.visible = javaHelpArea.includeInLayout = false;
			}
			
			override protected function resourcesChanged():void{
				super.resourcesChanged();
			}
			
			private function localeChanged(e:Event):void{
				resourcesChanged();
			}

			public function canPublish():Boolean {
				if (BrowserCheck.isUsingLessThanChrome38OnMac()) {
					return false;
				} else if (BrowserCheck.isUsingEdgePluginUnsupported()) {
					return false;
				} else {
					var javaIssue:String = JavaCheck.checkJava();
					if (javaIssue != null) {
						if (BrowserCheck.isChrome42OrHigher()) {
							return false;
						} else {
							return false;
						}
					} else {
						return true;
					}
				}
			}
		]]>
	</mx:Script>

	<!--http://stackoverflow.com/questions/369120/why-does-mxstates-have-trouble-being-resolved-to-a-component-implementation-->
	<mx:VBox id="javaHelpArea" includeInLayout="false" visible="false" height="100%" width="100%" verticalAlign="middle" horizontalAlign="center">
		<mx:Text width="80%" textAlign="center" styleName="desktopShareTextStyle" text="{ResourceUtil.getInstance().getString('bbb.desktopPublish.chromeHint.title')}" />
		<mx:Image id="javaHelpImg" styleName="chromeJavaHelpImage" source="{javaHelpImg.getStyle('imageSource')}" />
		<mx:Text width="80%" textAlign="center" styleName="desktopShareTextStyle" text="{ResourceUtil.getInstance().getString('bbb.desktopPublish.chromeHint.message')}" />
		<mx:Button label="{ResourceUtil.getInstance().getString('bbb.desktopPublish.chromeHint.button')}" click="restartJava()"/>
	</mx:VBox>
	<mx:states>
        <mx:State name="dispFullRegionControlBar">   
            <mx:AddChild>
              <mx:VBox id="clickBelowtoShareInfo" height="100%" width="100%" verticalAlign="middle" horizontalAlign="center">
                <mx:Text width="80%" textAlign="center" styleName="desktopShareTextStyle" text="{ResourceUtil.getInstance().getString('bbb.desktopPublish.clickBelowToShareHint')}" />

                <mx:HBox horizontalAlign="center">
                     <mx:Button id="btnFSPublish"
                                toolTip="{ResourceUtil.getInstance().getString('bbb.desktopPublish.fullscreen.tooltip')}"
                                label="{ResourceUtil.getInstance().getString('bbb.desktopPublish.fullscreen.label')}"
                                visible="true"
                                click="shareScreen(true)" />
                     <mx:Spacer width="100%"/>
                     <mx:Button id="btnRegionPublish"
                                toolTip="{ResourceUtil.getInstance().getString('bbb.desktopPublish.region.tooltip')}"
                                label="{ResourceUtil.getInstance().getString('bbb.desktopPublish.region.label')}"
                                visible="true"
                                click="shareScreen(false)"
                                focusEnabled="false"
                                tabEnabled="false"/>
                     <mx:Spacer width="100%"/>
                </mx:HBox>
              </mx:VBox>
            </mx:AddChild>
        </mx:State>	
		<mx:State name="chromeOnMacWarningState">
			<mx:AddChild>
				<mx:VBox height="100%" width="100%" verticalAlign="middle" horizontalAlign="center">
					<mx:Text id="chromeOnMacWarningLbl" width="80%" textAlign="center" styleName="desktopShareTextStyle"
							 text="{ResourceUtil.getInstance().getString('bbb.desktopPublish.chromeOnMacUnsupportedHint')}" />
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="chrome42WarningState">
			<mx:AddChild>
				<mx:VBox height="100%" width="100%" verticalAlign="middle" horizontalAlign="center">
					<mx:Text id="chrome42WarningLbl" width="80%" textAlign="center" styleName="desktopShareTextStyle"
							 text="{ResourceUtil.getInstance().getString('bbb.desktopPublish.chrome42UnsupportedHint')}" />
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="firefox52WarningState">
			<mx:AddChild>
				<mx:VBox height="100%" width="100%" verticalAlign="middle" horizontalAlign="center">
					<mx:Text id="firefox52WarningLbl" width="80%" textAlign="center" styleName="desktopShareTextStyle"
							 text="{ResourceUtil.getInstance().getString('bbb.desktopPublish.firefox52UnsupportedHint')}" />
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="edgePluginWarningState">
			<mx:AddChild>
				<mx:VBox height="100%" width="100%" verticalAlign="middle" horizontalAlign="center">
					<mx:Text id="edgePluginWarningLbl" width="80%" textAlign="center" styleName="desktopShareTextStyle"
							 text="{ResourceUtil.getInstance().getString('bbb.desktopPublish.edgePluginUnsupportedHint')}" />
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="javaIssueWarningState">
			<mx:AddChild>
				<mx:VBox height="100%" width="100%" verticalAlign="middle" horizontalAlign="center">
					<mx:Text id="javaIssueWarningStateLbl" width="80%" textAlign="center" styleName="desktopShareTextStyle" />
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
	</mx:states>
</mx:Canvas>
