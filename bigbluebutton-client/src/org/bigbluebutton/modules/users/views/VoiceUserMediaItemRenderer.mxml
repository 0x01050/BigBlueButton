<?xml version="1.0" encoding="utf-8"?>

<!--
BigBlueButton open source conferencing system - http://www.bigbluebutton.org

Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).

BigBlueButton is free software; you can redistribute it and/or modify it under the 
terms of the GNU Lesser General Public License as published by the Free Software 
Foundation; either version 2.1 of the License, or (at your option) any later 
version. 

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along 
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

$Id: $
--> 

<mx:HBox xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:mate="http://mate.asfusion.com/"
         verticalScrollPolicy="off" horizontalScrollPolicy="off"
         verticalAlign="middle"
         horizontalGap="8"
         horizontalAlign="center"
         creationComplete="onCreationComplete()" > 
  
  <fx:Declarations>
    <mate:Listener type="{UsersRollEvent.USER_ROLL_OVER}" method="onRollOver" />
    <mate:Listener type="{UsersRollEvent.USER_ROLL_OUT}" method="onRollOut" />
    <mate:Listener type="{ChangeMyRole.CHANGE_MY_ROLE_EVENT}" method="onChangeMyRole"/>
  </fx:Declarations>
  
  <fx:Script>
    <![CDATA[
      import flash.filters.BitmapFilterQuality;
      import flash.filters.GlowFilter;
      import mx.binding.utils.BindingUtils;
      import mx.controls.Menu;
      import mx.events.FlexEvent;
      import mx.events.MenuEvent;
      import org.bigbluebutton.common.Images;
      import org.bigbluebutton.common.Role;
      import org.bigbluebutton.core.Options;
      import org.bigbluebutton.core.UsersUtil;
      import org.bigbluebutton.core.events.VoiceConfEvent;
      import org.bigbluebutton.core.vo.LockSettingsVO;
      import org.bigbluebutton.main.model.users.BBBUser;
      import org.bigbluebutton.main.model.users.events.ChangeMyRole;
      import org.bigbluebutton.main.model.users.events.KickUserEvent;
      import org.bigbluebutton.modules.users.events.UsersRollEvent;
      import org.bigbluebutton.modules.users.model.UsersOptions;
      import org.bigbluebutton.util.i18n.ResourceUtil;
      
      [Bindable]
      private var images:Images = new Images();
      
      private var moderator:Boolean = false;
      [Bindable]
      private var rolledOver:Boolean = false;
      
      private var rolledOverMute:Boolean = false;
      private var rolledOverLock:Boolean = false;
      
      private var muteRolled:Boolean = false;
      private var lockRolled:Boolean = false;
      
      private var options:UsersOptions;
      private var myMenu:Menu = null;
      
      private function onCreationComplete():void{
        refreshRole(UsersUtil.amIModerator());
        
        this.addEventListener(FlexEvent.DATA_CHANGE, dataChangeHandler);
        
        BindingUtils.bindSetter(updateButtons, listenOnlyInd, "visible");
        BindingUtils.bindSetter(updateButtons, muteInd, "visible");
        
        options = Options.getOptions(UsersOptions) as UsersOptions;
      }
      
      private function dataChangeHandler(e:Event):void {
        //rest rolledOver when the data changes because onRollOut wont be called if the row moves
        if (data != null) {
          updateButtons();
        }
      }
      
      private function onRollOver(e:UsersRollEvent):void{
        if ((moderator || UsersUtil.isMe(e.userID)) && (e.userID == data.userId)) {
          rolledOver = true;
          updateButtons();
        }
      }
      
      private function onRollOut(e:UsersRollEvent):void{
        if ((moderator || UsersUtil.isMe(e.userID)) && rolledOver) {
          rolledOver = false;
          updateButtons();
        }
      }
      
      private function onChangeMyRole(e:ChangeMyRole):void {
        rolledOver = false;
        updateButtons();
        // close the menu if it was opened
        if (myMenu) myMenu.hide();
        
        refreshRole(e.role == Role.MODERATOR);
      }
      
      private function refreshRole(amIModerator:Boolean):void {
        settingsBtn.enabled = moderator = amIModerator;
      }
      
      private function muteMouseOverHandler():void {
        rolledOverMute = true;
        updateButtons();
      }
      
      private function muteMouseOutHandler():void {
        rolledOverMute = false;
        updateButtons();
      }
      
      private function lockMouseOverHandler():void {
        rolledOverLock = true;
        updateButtons();
      }
      
      private function lockMouseOutHandler():void {
        rolledOverLock = false;
        updateButtons();
      }
      
      private function kickUser():void{
        dispatchEvent(new KickUserEvent(data.userId));
      }
      
      private function toggleMuteState():void {
        var e:VoiceConfEvent = new VoiceConfEvent(VoiceConfEvent.MUTE_USER);
        e.userid = data.userId;
        e.mute = !data.muted;
        dispatchEvent(e);
      }
      
      private function updateButtons(voiceMuted:Boolean = false):void {
        // reset the mute image filter so the talking indicator doesn't stick
        muteImg.filters = null;
        
        var ls:LockSettingsVO = UsersUtil.getLockSettings();
        
      }
      
      private function openSettings():void {
        if (data != null) {
          var myMenuData:Array = [];
                    
          if (options.allowKickUser) {
            myMenuData.push({
              label: ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer.kickUser',[data.name]),
              icon: images.eject_user_new,
              callback: kickUser
            });
          }
          
          // make sure the previous menu is closed before opening a new one
          // This could be improved to include a flag that tells if the menu is open,
          // but it would require an extra listener for the MenuCloseEvent.
          if (myMenu) myMenu.hide();
          
          myMenu = Menu.createMenu(null, myMenuData, true);
          myMenu.variableRowHeight = true;
          
          var settingsBtnPos:Point = settingsBtn.localToGlobal(new Point(0,0));
          
          var myMenuPos:Point = new Point();
          myMenuPos.x = settingsBtnPos.x + settingsBtn.width;
          myMenuPos.y = settingsBtnPos.y;
          
          myMenu.addEventListener(MenuEvent.ITEM_CLICK, menuClickHandler);
          myMenu.show(myMenuPos.x, myMenuPos.y);
          myMenu.setFocus();
        }
      }
      
      private function menuClickHandler(e:MenuEvent):void {
        e.item.callback();
      }
    ]]>
  </fx:Script>
  
  <!--mx:Image id="talkingIcon" visible="{data.talking}" source="{images.sound_new}" width="20" height="16" 
  toolTip="{ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer.talking')}" /-->
  <mx:Image id="webcamImg" visible="false" source="{images.webcam_new_20}"
            width="20" height="20"
            toolTip="{ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer.webcam')}" />
  
  <mx:Image id="muteImg" visible="false" includeInLayout="true" width="20" height="20" />
  <mx:Button id="muteBtn" visible="false" includeInLayout="false" enabled="false" icon="{images.audio}"
             width="20" height="20" click="toggleMuteState()"
             mouseOver="muteMouseOverHandler()"
             mouseOut="muteMouseOutHandler()"
             toolTip="{data.muted ? ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer.pushToTalk',[data.name]) : ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer.pushToMute',[data.name])}" />
  <mx:Image id="lockImg" visible="false" includeInLayout="false" width="20" height="20" />
  <mx:Button id="settingsBtn"
             visible="false"
             width="20"
             height="20"
             click="openSettings()"
             icon="{images.users_settings}"
             toolTip="{ResourceUtil.getInstance().getString('bbb.users.settings.buttonTooltip')}"/>
  <!-- Helper objects because using BindingUtil with data break when the itemRenderer is recycled -->
  <mx:Image id="muteInd" includeInLayout="false" visible="{data.muted}" />
  <mx:Image id="voiceJoinedInd" includeInLayout="false" visible="{data.inVoiceConf}" />
  <mx:Image id="userLockedInd" includeInLayout="false" visible="{data.locked}" />
  <mx:Image id="hasStreamInd" includeInLayout="false" visible="{data.hasStream}" />
  <mx:Image id="viewingStreamInd" includeInLayout="false" visible="{data.viewingStream}" />
  <mx:Image id="listenOnlyInd" includeInLayout="false" visible="{data.listenOnly}" />
</mx:HBox>
