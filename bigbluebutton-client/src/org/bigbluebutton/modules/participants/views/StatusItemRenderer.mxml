<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:mate="http://mate.asfusion.com/"
	creationComplete="onCreationComplete()"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	horizontalAlign="center">
	
	<mate:Listener type="{ParticipantRollEvent.PARTICIPANT_ROLL_OVER}" method="onRollOver" />
	<mate:Listener type="{ParticipantRollEvent.PARTICIPANT_ROLL_OUT}" method="onRollOut" />
	
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.events.FlexEvent;
		
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.Role;
			import org.bigbluebutton.core.managers.UserManager;
			import org.bigbluebutton.main.model.users.events.RoleChangeEvent;
			import org.bigbluebutton.modules.participants.events.ParticipantRollEvent;
			
			private var images:Images = new Images();
  			private var rolledOver:Boolean = false;
  			private var moderator:Boolean = false;
  			
  			private function onCreationComplete():void {
  				moderator = UserManager.getInstance().getConference().amIModerator();
  				
  				//BindingUtils.bindSetter(updateButton, data, "presenter");
  				//BindingUtils.bindSetter(updateButton, data, "raiseHand"); 
  				//BindingUtils.bindSetter(updateButton, this, "data");
  				BindingUtils.bindSetter(updateButton, presenterInd, "includeInLayout");
  				BindingUtils.bindSetter(updateButton, moderatorInd, "includeInLayout");
  				BindingUtils.bindSetter(updateButton, raiseHandInd, "includeInLayout");
  				
  				this.addEventListener(FlexEvent.DATA_CHANGE, dataChangeHandler);
  				ChangeWatcher.watch(this, "data", dataChangeHandler);
  				//updateButton(); //initialize state
  				validateNow();
  			}
  			
  			private function dataChangeHandler(e:Event):void {
  				if (data != null)
  					updateButton(); //reassess data state on change
  			}
  			
  			private function updateButton(unneeded:Object = null):void {
	  			if (data != null) {
	  				if (data.presenter) {
	  					roleBtn.setStyle("icon", images.presenter_new);
	  					roleBtn.toolTip = "Presenter";
	  					roleBtn.enabled = false;
	  				} else if (rolledOver) {
	  					roleBtn.setStyle("icon", images.presenter_new);
	  					roleBtn.toolTip = "Switch Presenter";
	  					roleBtn.enabled = true;
	  				} else if (data.role == Role.MODERATOR) {
	  					roleBtn.setStyle("icon", images.moderator);
	  					roleBtn.toolTip = "Moderator";
	  					roleBtn.enabled = false;
	  				} else if (data.raiseHand) {
	  					roleBtn.setStyle("icon", images.hand_new);
	  					roleBtn.toolTip = "Hand Raised";
	  					roleBtn.enabled = false;
	  				} else {
	  					roleBtn.setStyle("icon", null);
	  					roleBtn.toolTip = "";
	  					roleBtn.enabled = false;
	  				}
	  			}
  			}
  			
  			private function onRollOver(e:ParticipantRollEvent):void{
				if (moderator && (e.userID == data.userID)) {
					rolledOver = true;
					updateButton();
				}
			}
			
			private function onRollOut(e:ParticipantRollEvent):void{
				if (moderator && (e.userID == data.userID)) {
					rolledOver = false;
					updateButton();
				}
			}
  			
  			private function assignPresenterClicked():void {
        		// Ignore if the selected user is already the presenter.
        		if (data.presenter) return;
        		
				var e:RoleChangeEvent = new RoleChangeEvent(RoleChangeEvent.ASSIGN_PRESENTER);
				e.userid = data.userID;
				e.username = data.name;
				dispatchEvent(e);
        	}
		]]>
	</mx:Script>	
	<mx:Button id="roleBtn" enabled="false" width="20" height="20" click="assignPresenterClicked()" />
	<mx:Image id="presenterInd" includeInLayout="false" visible="{data.presenter}" />
	<mx:Image id="moderatorInd" includeInLayout="false" visible="{data.role == Role.MODERATOR}" />
	<mx:Image id="raiseHandInd" includeInLayout="false" visible="{data.raiseHand}" />
</mx:HBox>
