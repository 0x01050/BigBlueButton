<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:mate="http://mate.asfusion.com/"
	mouseDown="doMouseDown()" mouseMove="doMouseMove()" mouseUp="doMouseUp()" creationComplete="init()" visible="false" 
	mouseOver="setCursor(toolType)" mouseOut="removeCursor()" doubleClickEnabled="true" doubleClick="doMouseDoubleClick()"  implements="org.bigbluebutton.common.IBbbCanvas">
	<mx:Script>
		<![CDATA[			
			import mx.managers.CursorManager;
			
			import org.bigbluebutton.common.IBbbCanvas;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.modules.whiteboard.WhiteboardCanvasModel;
			import org.bigbluebutton.modules.whiteboard.business.shapes.DrawObject;
			import org.bigbluebutton.modules.whiteboard.business.shapes.GraphicObject;
			import org.bigbluebutton.modules.whiteboard.business.shapes.SelectObject;
			import org.bigbluebutton.modules.whiteboard.business.shapes.TextObject;
			import org.bigbluebutton.modules.whiteboard.events.PageEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardButtonEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardDrawEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardSettingEvent;
			
			public var model:WhiteboardCanvasModel;			
			public var bbbCanvas:IBbbCanvas;
			private var _xPosition:int;
			private var _yPosition:int;
			private var images:Images = new Images();
			[Bindable] private var select_icon:Class = images.select_icon;
			[Bindable] private var pencil_icon:Class = images.pencil_icon;
			[Bindable] private var rectangle_icon:Class = images.square_icon;
			[Bindable] private var ellipse_icon:Class = images.circle_icon;
			[Bindable] private var line_icon:Class = images.line_icon;
			[Bindable] private var text_icon:Class = images.text_icon;
			[Bindable] private var eraser_icon:Class = images.eraser_icon;
			[Bindable] private var highlighter_icon:Class = images.highlighter_icon;
			private var toolType:String = DrawObject.PENCIL;
			private var whiteboardEnabled:Boolean = false;
			private var showWhiteboard:Boolean = true;

			
			private function init():void{
				this.label = "Highlighter";
			}
			
			private function doMouseUp():void {
				model.doMouseUp();
			}
			
			private function doMouseDoubleClick():void{
				model.doMouseDoubleClick(this.mouseX, this.mouseY);
			}
			
			private function doMouseDown():void{
				model.doMouseDown(this.mouseX, this.mouseY);
			}
						
			private function doMouseMove():void{
				model.doMouseMove(this.mouseX, this.mouseY);
			}
			
			public function sendGraphicToServer(gobj:GraphicObject, type:String):void{
				var event:WhiteboardDrawEvent = 
					new WhiteboardDrawEvent(type);
				event.message = gobj;
				dispatchEvent(event);					
			}
			
			public function setGraphicType(type:String):void{
				model.setGraphicType(type);
			}
			
			public function setTool(s:String):void{
				model.setTool(s);
				toolType = s;
			}
			
			public function changeColor(e:Event):void{
				model.changeColor(e.target.selectedColor);
			}
	
			public function changeThickness(e:Event):void{
				model.changeThickness(e.target.value);
			}
			
			public function toggleFill():void{
				model.toggleFill();
			}
			
			public function toggleTransparency():void{
				model.toggleTransparency();
			}
			
			public function setFill(e:WhiteboardSettingEvent):void{
				model.setFill(e.value);

			}
			
			public function setTransparent(e:WhiteboardSettingEvent):void{
				model.setTransparent(e.value);
			}
			
			public function get xPosition():int {
				return _xPosition;
			}
			
			public function get yPosition():int {
				return _yPosition;
			}
			
			public function set xPosition(x:int):void {
				_xPosition = x;
			}
			
			public function set yPosition(y:int):void {
				_yPosition = y;
			}
				
			public function makeTextObjectsEditable(e:MadePresenterEvent):void {
				model.makeTextObjectsEditable(e);
			}
			
			public function makeTextObjectsUneditable(e:MadePresenterEvent):void {
				model.makeTextObjectsUneditable(e);
			}
			
			private function setWhiteboardVisibility():void{
				if (this.whiteboardEnabled && this.showWhiteboard) this.visible = true;
				else this.visible = false;
			}
			
			/* added this functionality in WhiteboardToolbar.mxml
			   instead to allow a variety of cursors */
			
			public function setCursorPencil():void{
				CursorManager.setCursor(pencil_icon);
			}
			
			public function setCursor(toolType:String):void{
				if(toolType == DrawObject.ELLIPSE) {
					CursorManager.setCursor(ellipse_icon);
				} else if(toolType == DrawObject.RECTANGLE) {
					CursorManager.setCursor(rectangle_icon);
				} else if(toolType == DrawObject.PENCIL) {
					CursorManager.setCursor(pencil_icon);
				} else if(toolType == DrawObject.LINE) {
					CursorManager.setCursor(line_icon);
				} else if(toolType == DrawObject.HIGHLIGHTER) {
					CursorManager.setCursor(highlighter_icon);
				} else if(toolType == DrawObject.ERASER) {
					CursorManager.setCursor(eraser_icon);
				} else if(toolType == TextObject.TEXT_TOOL) {
					CursorManager.setCursor(text_icon);
				} else if(toolType == SelectObject.SELECT_TOOL) {
					CursorManager.setCursor(select_icon);
				} 
			}
			
			private function removeCursor():void{
				CursorManager.removeCursor(CursorManager.currentCursorID);
				doMouseUp();
			}
			
			/** Inherited from org.bigbluebutton.common.IBbbCanvas*/
			public function addRawChild(child:DisplayObject):void{
				this.bbbCanvas.addRawChild(child);
			}
			
			public function removeRawChild(child:DisplayObject):void{
				this.bbbCanvas.removeRawChild(child);
			}
			
			public function doesContain(child:DisplayObject):Boolean{
				return bbbCanvas.doesContain(child);
			}
			
			public function acceptOverlayCanvas(overlay:IBbbCanvas):void{
				LogUtil.debug("WhiteboardCanvas::acceptOverlayCanvas()");
				LogUtil.debug("OVERLAYING PRESENTATION CANVAS");
				this.bbbCanvas = overlay;
				//Load existing shapes onto the canvas.
				dispatchEvent(new PageEvent(PageEvent.LOAD_PAGE));
			}
			
			public function moveCanvas(x:Number, y:Number):void {
				this.x = x;
				this.y = y;
			}
			
			public function getMouseXY():Array {
				return [this.mouseX, this.mouseY];
			}
			
			public function removeGraphic(child:DisplayObject):void {
				if (bbbCanvas == null) return;
				if (doesContain(child)) removeRawChild(child);
			}
			
			public function addGraphic(child:DisplayObject):void {
				if (bbbCanvas == null) return;
				addRawChild(child);
			}
			
			public function zoomCanvas(width:Number, height:Number):void {
				this.width = width;
				this.height = height;	
				model.zoomCanvas(width, height);
			}
					
			public function showCanvas(show:Boolean):void{
				this.showWhiteboard = show;
				setWhiteboardVisibility();
			}
			
			/** End IBBBCanvas*/
			
			public function isPageEmpty():Boolean {
				return model.isPageEmpty();
			}
			
			public function enableWhiteboard(e:WhiteboardButtonEvent):void{
				this.whiteboardEnabled = true;
				setWhiteboardVisibility();
			}
			
			public function disableWhiteboard(e:WhiteboardButtonEvent):void{
				this.whiteboardEnabled = false;
				setWhiteboardVisibility();
			}
			
		]]>
	</mx:Script>
</mx:Canvas>
