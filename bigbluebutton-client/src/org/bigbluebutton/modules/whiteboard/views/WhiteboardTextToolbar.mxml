<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  Author: Ajay Gopinath <ajgopi124@gmail.com>
-->

<mx:HBox xmlns="flexlib.containers.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/" visible="false" backgroundColor="0xCCCCCC" cornerRadius="5" borderStyle="solid" 
	paddingBottom="3" paddingTop="3" paddingLeft="3" paddingRight="3" alpha="0">
	
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="presenterMode" />
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="viewerMode" />
	<mate:Listener type="{WhiteboardButtonEvent.DISABLE_WHITEBOARD}" method="disableTextToolbar" />
	<mate:Listener type="{StopWhiteboardModuleEvent.STOP_HIGHLIGHTER_MODULE_EVENT}" method="closeToolbar" />
	<mate:Listener type="{GraphicObjectFocusEvent.OBJECT_SELECTED}" method="handleObjSelected" />
	<mate:Listener type="{GraphicObjectFocusEvent.OBJECT_DESELECTED}" method="handleObjDeselected" />
	<mate:Listener type="{HideTextToolbarEvent.HIDE_TEXT_TOOLBAR}" method="disableTextToolbar" />
	
	<!--<mx:Style>
		.colorPickerStyle {
	      backgroundColor:#E5E6E7;
	      columnCount:12;
	      horizontalGap:0;
	      previewHeight:22;
	      previewWidth:45;
	      swatchGridBackgroundColor:#000000;
	      swatchGridBorderSize:0;
	      swatchHeight:60;
	      swatchHighlightColor:#FFFFFF;
	      swatchHighlightSize:1;
	      swatchWidth:12;
	      textFieldWidth:72;
	      verticalGap:0;
	   }

	</mx:Style>-->
	
	<mx:Script>
		<![CDATA[
			import flashx.textLayout.operations.ModifyInlineGraphicOperation;
			import mx.controls.Alert;
			import mx.events.MoveEvent;
			import mx.events.ResizeEvent;
			import mx.managers.CursorManager;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.modules.present.events.PresentationEvent;
			import org.bigbluebutton.modules.present.ui.views.PresentationWindow;
			import org.bigbluebutton.modules.whiteboard.business.shapes.DrawObject;
			import org.bigbluebutton.modules.whiteboard.business.shapes.GraphicObject;
			import org.bigbluebutton.modules.whiteboard.business.shapes.SelectObject;
			import org.bigbluebutton.modules.whiteboard.business.shapes.TextObject;
			import org.bigbluebutton.modules.whiteboard.business.shapes.WhiteboardConstants;
			import org.bigbluebutton.modules.whiteboard.events.GraphicObjectFocusEvent;
			import org.bigbluebutton.modules.whiteboard.events.StopWhiteboardModuleEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardButtonEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardDrawEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardPresenterEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardSettingEvent;
			import org.bigbluebutton.modules.whiteboard.events.HideTextToolbarEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			public var canvas:WhiteboardCanvas;
			public var textColor:uint;
			public var bgColor:uint;
			public var backgroundVisible:Boolean;
			
			private var images:Images = new Images();
			[Bindable] private var toggle_text_background_icon:Class = images.toggle_text_background_icon;
			private var currentlySelectedTextObject:TextObject = null;			

			public function init():void {
				this.addEventListener(MouseEvent.MOUSE_OVER, adjustAlpha);
				this.addEventListener(MouseEvent.MOUSE_OUT, adjustAlpha);
			}
			
			public function adjustAlpha(event:MouseEvent):void {
				if(event.type == MouseEvent.MOUSE_OVER) {
					this.alpha = 1;
				} else if(event.type == MouseEvent.MOUSE_OUT) {
					this.alpha = 0.35;
				} 
			}

			/**
			 * Sets the text color of the selected text object
			 * @param e The event
			 * 
			 */		
			protected function setTextColor(e:Event):void{
				this.textColor = e.target.selectedColor;
				canvas.modifySelectedTextObject(textColor, backgroundVisible, bgColor);
			}
			
			/**
			 * Sets the background color of the selected text object
			 * @param e The event
			 * 
			 */		
			protected function changeTextBackgroundColor(e:Event):void{
				this.bgColor = e.target.selectedColor;
				canvas.modifySelectedTextObject(textColor, backgroundVisible, bgColor);
			}
			
			/**
			 * Sets the background color visible of the selected text object
			 * @param e The event
			 * 
			 */			
			protected function setBackgroundVisible(e:Event):void{
				this.backgroundVisible = e.target.selected;
				canvas.modifySelectedTextObject(textColor, backgroundVisible, bgColor);
			}
			
			
			private function presenterMode(e:MadePresenterEvent):void{
				
			}
			
			private function viewerMode(e:MadePresenterEvent):void{
				disableTextToolbar();
			}
			
			private function sendUndoCommand():void{
				if (!canvas.isPageEmpty()) dispatchEvent(new WhiteboardDrawEvent(WhiteboardDrawEvent.UNDO_GRAPHIC));
			}
			
			private function enableTextToolbar():void{
				this.visible = true;
			}
			
			private function disableTextToolbar():void{
				this.visible = false;
			}
			
			public function syncPropsWith(tobj:TextObject):void{
				currentlySelectedTextObject = tobj;
				if(tobj == null) {
					ctextpik.selectedColor = 0x000000;
					cbackpik.selectedColor = 0x000000;
					btnToggleBackground.selected = false;
				} else {
					this.textColor = ctextpik.selectedColor = tobj.textColor;
					this.bgColor = cbackpik.selectedColor = tobj.backgroundColor;
					this.backgroundVisible = btnToggleBackground.selected = tobj.background;
				}
			}
			
			public function positionToolbar(window:PresentationWindow):void{
				// intial positioning of text toolbar
				disableTextToolbar();
				this.x = 0;
				this.y = 0;
				parent.setChildIndex(this, parent.numChildren-1);
			}
			
			public function repositionToolbar(tobj:TextObject):void{
				// translate textobject's coords to stage coords because texttoolbar is on stage
				var loc:Point = canvas.localToGlobal(new Point(tobj.x, tobj.y));
				this.x = loc.x;
				this.y = loc.y - 5;
				parent.setChildIndex(this, parent.numChildren-1);
			}
			
			private function closeToolbar(e:StopWhiteboardModuleEvent):void{
				parent.removeChild(this);
			}
			
			private function handleObjSelected(event:GraphicObjectFocusEvent):void  {
				if(event.data.getGraphicType() != WhiteboardConstants.TYPE_TEXT) return;
				var tobj:TextObject = event.data as TextObject;
				repositionToolbar(tobj);
				syncPropsWith(tobj);
				if(!this.visible)
					enableTextToolbar();
				if(!this.enabled)
					this.enabled = true;
				LogUtil.debug("!!!!SELECTED:" + " " + tobj.getProperties());
			}

			private function handleObjDeselected(event:GraphicObjectFocusEvent):void  {
				if(event.data.getGraphicType() != WhiteboardConstants.TYPE_TEXT) return;
				var tobj:TextObject = event.data as TextObject;
				syncPropsWith(null);
				disableTextToolbar();
				LogUtil.debug("!!!!DESELECTED:" + " " + tobj.getProperties());
			}

			public function adjustForZoom(x:Number, y:Number):void {
				repositionToolbar(currentlySelectedTextObject);
			}
		]]>
	</mx:Script>
	

	<mx:ColorPicker width="18" height="18"  change="setTextColor(event)" id="ctextpik" selectedColor="0x000000"
					toolTip="{ResourceUtil.getInstance().getString('ltbcustom.bbb.highlighter.texttoolbar.textColorPicker')}"/>
	
	<mx:Spacer width="5" />
	
	<mx:Button width="18" height="18" id="btnToggleBackground" click="setBackgroundVisible(event)"  icon="{toggle_text_background_icon}" 
			   toolTip="{ResourceUtil.getInstance().getString('ltbcustom.bbb.highlighter.texttoolbar.backColorVisible')}" toggle="true"/>
	
	<mx:ColorPicker width="18" height="18" change="changeTextBackgroundColor(event)" id="cbackpik"  selectedColor="0x000000" 
					toolTip="{ResourceUtil.getInstance().getString('ltbcustom.bbb.highlighter.texttoolbar.backColorPicker')}"/>

	
</mx:HBox>
