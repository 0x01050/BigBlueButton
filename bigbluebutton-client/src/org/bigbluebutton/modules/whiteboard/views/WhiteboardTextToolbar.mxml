<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  Author: Ajay Gopinath <ajgopi124@gmail.com>
-->

<mx:HBox xmlns="flexlib.containers.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/" visible="false" backgroundColor="0xCCCCCC" 
	cornerRadius="5" borderStyle="solid" 
	paddingBottom="3" paddingTop="3" paddingLeft="3" paddingRight="3" alpha="0" 
	xmlns:views="org.bigbluebutton.modules.whiteboard.views.*" xmlns:local="*">
	
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="presenterMode" />
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="viewerMode" />
	<mate:Listener type="{WhiteboardButtonEvent.DISABLE_WHITEBOARD}" method="disableTextToolbar" />
	<mate:Listener type="{StopWhiteboardModuleEvent.STOP_HIGHLIGHTER_MODULE_EVENT}" method="closeToolbar" />
	<mate:Listener type="{GraphicObjectFocusEvent.OBJECT_SELECTED}" method="handleObjSelected" />
	<mate:Listener type="{GraphicObjectFocusEvent.OBJECT_DESELECTED}" method="handleObjDeselected" />
	<mate:Listener type="{HideTextToolbarEvent.HIDE_TEXT_TOOLBAR}" method="disableTextToolbar" />
	
	<!--<mx:Style>
		.colorPickerStyle {
	      backgroundColor:#E5E6E7;
	      columnCount:12;
	      horizontalGap:0;
	      previewHeight:22;
	      previewWidth:45;
	      swatchGridBackgroundColor:#000000;
	      swatchGridBorderSize:0;
	      swatchHeight:60;
	      swatchHighlightColor:#FFFFFF;
	      swatchHighlightSize:1;
	      swatchWidth:12;
	      textFieldWidth:72;
	      verticalGap:0;
	   }

	</mx:Style>-->
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Menu;
			import mx.events.MenuEvent;
			import mx.events.MoveEvent;
			import mx.events.ResizeEvent;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.modules.present.ui.views.PresentationWindow;
			import org.bigbluebutton.modules.whiteboard.business.shapes.TextObject;
			import org.bigbluebutton.modules.whiteboard.business.shapes.WhiteboardConstants;
			import org.bigbluebutton.modules.whiteboard.events.GraphicObjectFocusEvent;
			import org.bigbluebutton.modules.whiteboard.events.HideTextToolbarEvent;
			import org.bigbluebutton.modules.whiteboard.events.StopWhiteboardModuleEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardButtonEvent;
			import org.bigbluebutton.modules.whiteboard.events.WhiteboardDrawEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			import org.hamcrest.object.nullValue;
			
			public var canvas:WhiteboardCanvas;
			public var textColor:uint;
			public var bgColor:uint;
			public var textSize:Number;
			public var backgroundVisible:Boolean;
			
			private var images:Images = new Images();
			[Bindable] private var toggle_text_background_icon:Class = images.toggle_text_background_icon;
			private var currentlySelectedTextObject:TextObject = null;	
			private var presentationWindow:PresentationWindow;
			private var normalAlpha:Number = 0.45;
			private var focusedAlpha:Number = 0.1;
			
			public function init():void {
				this.alpha = 0.45;
				this.visible = true;
				this.addEventListener(MouseEvent.MOUSE_OVER, adjustAlpha);
				this.addEventListener(MouseEvent.MOUSE_OUT, adjustAlpha);
			}
			
			public function adjustAlpha(event:MouseEvent):void {
				if(event.type == MouseEvent.MOUSE_OVER) {
					this.alpha = normalAlpha;
				} else if(event.type == MouseEvent.MOUSE_OUT) {
					this.alpha = focusedAlpha;
				} 
			}
			
			private function initTextSizeMenu(): void {
				var m:Menu = new Menu();
				m.variableRowHeight = true;
				var textSizeMenuData:Object = [
					{label: "12"}, 
					{label: "14"}, 
					{label: "16"},
					{label: "18"}, 
					{label: "22"}, 
					{label: "24"}, 
					{label: "32"}, 
					{label: "36"}
				];  
				m.dataProvider = textSizeMenuData;
				m.addEventListener(MenuEvent.CHANGE, textSizeMenuClick);
				m.showRoot = false;
				textSizeMenu.popUp = m;
			}
			
			// Define the event listener for the Menu control's change event. 
			private function textSizeMenuClick(event:MenuEvent):void {
				textSizeMenu.displayPopUp();
				var newTextSize:Number = Number(event.label);    
				setTextSize(newTextSize);
				//textSizeMenu.close();
			}
			
			/**
			 * Sets the text color of the selected text object
			 * @param e The event
			 * 
			 */		
			protected function setTextColor(e:Event):void{
				this.textColor = e.target.selectedColor;
				canvas.modifySelectedTextObject(textColor, backgroundVisible, bgColor, textSize);
				canvas.stage.focus = currentlySelectedTextObject;
			}
			
			/**
			 * Sets the background color of the selected text object
			 * @param e The event
			 * 
			 */		
			protected function changeTextBackgroundColor(e:Event):void{
				this.bgColor = e.target.selectedColor;
				canvas.modifySelectedTextObject(textColor, backgroundVisible, bgColor, textSize);
				canvas.stage.focus = currentlySelectedTextObject;
			}
			
			/**
			 * Sets the background color visible of the selected text object
			 * @param e The event
			 * 
			 */			
			protected function setBackgroundVisible(e:Event):void{
				this.backgroundVisible = e.target.selected;
				canvas.modifySelectedTextObject(textColor, backgroundVisible, bgColor, textSize);
				canvas.stage.focus = currentlySelectedTextObject;
			}
			
			/**
			 * Sets the text size of the selected text object
			 * @param size the size to set for the selected text object
			 * 
			 */			
			protected function setTextSize(size:Number):void {
				this.textSize = size;
				LogUtil.debug("Text size set to: " + size);
				textSizeMenu.label = String(this.textSize);
				canvas.modifySelectedTextObject(textColor, backgroundVisible, bgColor, textSize);
			}
			
			private function presenterMode(e:MadePresenterEvent):void{
				
			}
			
			private function viewerMode(e:MadePresenterEvent):void{
				disableTextToolbar();
			}
			
			private function enableTextToolbar():void{
				this.visible = true;
				this.alpha = normalAlpha;
			}
			
			private function disableTextToolbar():void{
				this.visible = false;
				this.alpha = 0;
			}
			
			private function handleHideTextToolbarEvent(e:HideTextToolbarEvent):void{
				LogUtil.debug("hiding toolbar by hidetexttoolbarevent");
				this.disableTextToolbar();
			}
			
			public function syncPropsWith(tobj:TextObject):void{
				currentlySelectedTextObject = tobj;
				if(tobj == null) {
					this.textColor = ctextpik.selectedColor = 0x000000;
					this.bgColor = cbackpik.selectedColor = 0x000000;
					this.backgroundVisible = btnToggleBackground.selected = false;
					this.textSizeMenu.label = "14";
					this.textSize = Number(textSizeMenu.label);
				} else {
					this.textColor = ctextpik.selectedColor = tobj.textColor;
					this.bgColor = cbackpik.selectedColor = tobj.backgroundColor;
					this.backgroundVisible = btnToggleBackground.selected = tobj.background;
					this.textSizeMenu.label = String(tobj.textSize);
					this.textSize = tobj.textSize;
				}
			}
			
			// invoked by WhiteboardManager when the TextToolbar is first loaded
			public function positionToolbar(window:PresentationWindow):void{
				this.presentationWindow = window;
				presentationWindow.addEventListener(ResizeEvent.RESIZE, repositionToolbarByWindow);
				presentationWindow.addEventListener(MouseEvent.CLICK, repositionToolbarByWindow);
				presentationWindow.addEventListener(MoveEvent.MOVE, repositionToolbarByWindow);
				disableTextToolbar();
				this.x = 0;
				this.y = 0;
				parent.setChildIndex(this, parent.numChildren-1);
				canvas.model.doMouseDoubleClick(0,0);

			}
			
			/* required for repositioning the TextToolbar when an event occurs
			   on the presentation window
			*/
			public function repositionToolbarByWindow(event:Event = null):void {
				repositionToolbar();
			}
			
			public function repositionToolbar(tobj:TextObject = null):void {
				// translate TextObject's coords to stage coords because TextToolbar is added to stage
				if(tobj == null)  tobj = currentlySelectedTextObject;
				if(textSizeMenu.isPopUp)
					textSizeMenu.close();
				var loc:Point = canvas.localToGlobal(new Point(tobj.x, tobj.y));
				this.x = loc.x;
				this.y = loc.y - this.height - 45;
				parent.setChildIndex(this, parent.numChildren-1);
			}
			
			private function closeToolbar(e:StopWhiteboardModuleEvent):void{
				parent.removeChild(this);
			}
			
			private function handleObjSelected(event:GraphicObjectFocusEvent):void  {
				if(event.data.getGraphicType() != WhiteboardConstants.TYPE_TEXT) return;
				var tobj:TextObject = event.data as TextObject;
				repositionToolbar(tobj);
				syncPropsWith(tobj);
				if(!this.visible)
					enableTextToolbar();
				if(!this.enabled)
					this.enabled = true;
				LogUtil.debug("!!!!SELECTED:" + " " + tobj.getProperties());
			}

			private function handleObjDeselected(event:GraphicObjectFocusEvent):void  {
				if(event.data.getGraphicType() != WhiteboardConstants.TYPE_TEXT) return;
				var tobj:TextObject = event.data as TextObject;
				syncPropsWith(null);
				disableTextToolbar();
				textSizeMenu.close();
				LogUtil.debug("!!!!DESELECTED:" + " " + tobj.getProperties());
			}

			// repositions the toolbar when canvas is zoomed
			public function adjustForZoom(x:Number, y:Number):void {
				repositionToolbar(currentlySelectedTextObject);
			}
		]]>
	</mx:Script>
	

	<mx:ColorPicker width="20" height="20"  change="setTextColor(event)" id="ctextpik" selectedColor="0x000000"
					toolTip="{ResourceUtil.getInstance().getString('ltbcustom.bbb.highlighter.texttoolbar.textColorPicker')}"/>
	
	<mx:Spacer width="3" />
	
	<mx:Button width="20" height="20" id="btnToggleBackground" click="setBackgroundVisible(event)"  icon="{toggle_text_background_icon}" 
			   toolTip="{ResourceUtil.getInstance().getString('ltbcustom.bbb.highlighter.texttoolbar.backColorVisible')}" toggle="true"/>
	
	<mx:ColorPicker width="20" height="20" change="changeTextBackgroundColor(event)" id="cbackpik"  selectedColor="0x000000" 
					toolTip="{ResourceUtil.getInstance().getString('ltbcustom.bbb.highlighter.texttoolbar.backColorPicker')}"/>

	<!--<mx:ComboBox id="textSizeMenu" change="setTextSize(event)" width="25"
				 toolTip="{ResourceUtil.getInstance().getString('ltbcustom.bbb.highlighter.texttoolbar.textSizeMenu')}"> 
		<mx:ArrayCollection>
			<mx:Object label="12" data="12"/>
			<mx:Object label="14" data="14"/>
			<mx:Object label="16" data="16"/>
			<mx:Object label="18" data="18"/>
			<mx:Object label="22" data="22"/>
			<mx:Object label="24" data="24"/>
			<mx:Object label="32" data="32"/>
		</mx:ArrayCollection>
	</mx:ComboBox>-->
	
	<views:PopUpCombo id="textSizeMenu" creationComplete="initTextSizeMenu()" 
					  toolTip="{ResourceUtil.getInstance().getString('ltbcustom.bbb.highlighter.texttoolbar.textSizeMenu')}" 
					   openAlways="true" specificOpenDirection="{PopUpCombo.OPEN_UP}" />
</mx:HBox>
