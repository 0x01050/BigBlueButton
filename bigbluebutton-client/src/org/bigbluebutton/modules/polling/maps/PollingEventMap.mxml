<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/">

	<mx:Script>
		<![CDATA[
      import org.bigbluebutton.main.events.MadePresenterEvent;
      import org.bigbluebutton.main.events.ShortcutEvent;
      import org.bigbluebutton.modules.polling.events.GenerateWebKeyEvent;
      import org.bigbluebutton.modules.polling.events.ModuleEvent;
      import org.bigbluebutton.modules.polling.events.OpenCreatePollWindowEvent;
      import org.bigbluebutton.modules.polling.events.OpenPollMainWindowEvent;
      import org.bigbluebutton.modules.polling.events.OpenPollResultWindowEvent;
      import org.bigbluebutton.modules.polling.events.OpenPollUpdateWindowEvent;
      import org.bigbluebutton.modules.polling.events.OpenSavedPollEvent;
      import org.bigbluebutton.modules.polling.events.OpenTakePollWindowEvent;
      import org.bigbluebutton.modules.polling.events.PollGetPollEvent;
      import org.bigbluebutton.modules.polling.events.PollGetTitlesEvent;
      import org.bigbluebutton.modules.polling.events.PollReturnTitlesEvent;
      import org.bigbluebutton.modules.polling.events.PollingInstructionsWindowEvent;
      import org.bigbluebutton.modules.polling.events.PollingViewWindowEvent;
      import org.bigbluebutton.modules.polling.events.ReviewResultsEvent;
      import org.bigbluebutton.modules.polling.managers.PollingManager;
      import org.bigbluebutton.modules.polling.managers.PollingWindowManager;
      import org.bigbluebutton.modules.polling.model.PollingModel;
		]]>
				
	</mx:Script>
	
	<EventHandlers type="{ModuleEvent.START}">
		<ObjectBuilder generator="{PollingWindowManager}"/>	
		<MethodInvoker generator="{PollingWindowManager}" method="initialize"/>
		<MethodInvoker generator="{PollingManager}" method="handleStartModuleEvent" arguments="{event.module}"/>
	</EventHandlers>	
	
	<EventHandlers type="{ModuleEvent.STOP}">
	</EventHandlers>	

  <EventHandlers type="{OpenCreatePollWindowEvent.OPEN_CREATE_POLL_WINDOW}">
    <MethodInvoker generator="{PollingWindowManager}"   method="handleOpenCreatePollWindowEvent" />
  </EventHandlers>
  
	<EventHandlers type="{OpenPollMainWindowEvent.OPEN_POLL_MAIN_WINDOW}">
		<MethodInvoker generator="{PollingWindowManager}"   method="handleOpenPollMainWindowEvent" />
	</EventHandlers>
	
	<EventHandlers type="{OpenPollResultWindowEvent.OPEN_RESULT_WINDOW}">
		<MethodInvoker generator="{PollingWindowManager}"   method="handleOpenPollResultWindowEvent" arguments="{event}"/>
	</EventHandlers>
	
	<EventHandlers type="{OpenPollUpdateWindowEvent.OPEN_UPDATE_WINDOW}">
		<MethodInvoker generator="{PollingWindowManager}"   method="handleOpenPollUpdateWindowEvent" arguments="{event}"/>
	</EventHandlers>
	
	<EventHandlers type="{PollingInstructionsWindowEvent.CLOSE}">
		<MethodInvoker generator="{PollingManager}" method="handleClosePollingInstructionsWindowEvent"  arguments="{event}"/>
	</EventHandlers>
	
	<EventHandlers type="{OpenTakePollWindowEvent.OPEN_TAKE_POLL_WINDOW}">
		<MethodInvoker generator="{PollingWindowManager}"  method="handleOpenTakePollWindowEvent" arguments="{event}"/>
	</EventHandlers>
	
	<EventHandlers type="{PollingViewWindowEvent.CLOSE}">
		<MethodInvoker generator="{PollingManager}"  method="handleClosePollingViewWindow" arguments="{event}"/>
	</EventHandlers>
	
	<EventHandlers type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}">
		<MethodInvoker generator="{PollingManager}" method="handleMadePresenterEvent" arguments="{event}"/>
	</EventHandlers>
	
	<EventHandlers type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}">
		<MethodInvoker generator="{PollingManager}" method="handleMadeViewerEvent" arguments="{event}"/>
	</EventHandlers>	
	
	<Injectors target="{PollingWindowManager}">
		<PropertyInjector targetKey="model" source="{PollingModel}" />
		<PropertyInjector targetKey="dispatcher" source="{scope.dispatcher}"/>
	</Injectors>
    
  <Debugger level="{Debugger.ALL}" />
</EventMap>
