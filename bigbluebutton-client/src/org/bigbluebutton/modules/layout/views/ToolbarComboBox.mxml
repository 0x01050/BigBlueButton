<?xml version="1.0" encoding="utf-8"?>
<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

  Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

  This program is free software; you can redistribute it and/or modify it under the
  terms of the GNU Lesser General Public License as published by the Free Software
  Foundation; either version 2.1 of the License, or (at your option) any later
  version.

  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License along
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

  Author: Felipe Cecagno <felipe@mconf.org>

  $Id: $
-->
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		   creationComplete="init()" 
		   xmlns:mate="http://mate.asfusion.com/"
		   implements="org.bigbluebutton.common.IBbbToolbarComponent">
	
	<mate:Listener type="{LayoutsLoadedEvent.LAYOUTS_LOADED}" method="populateComboBox" />
	<mate:Listener type="{OpenWindowEvent.OPEN_WINDOW_EVENT}" method="handleOpenWindowEvent" />
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			import flash.events.Event;
			import flash.events.ProgressEvent;
			import flash.events.IOErrorEvent;
			
			import mx.controls.Alert;
			import mx.events.ResizeEvent;
			
			import flash.net.FileReference;

			import flexlib.mdi.managers.MDIManager;
			import flexlib.mdi.containers.MDICanvas;
			import flexlib.mdi.containers.MDIWindow;
			import flexlib.mdi.events.MDIManagerEvent;
			import flexlib.mdi.events.MDIWindowEvent;
			
			import org.bigbluebutton.common.IBbbModuleWindow;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.common.events.OpenWindowEvent;
			import org.bigbluebutton.main.views.MainToolbar;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			import org.bigbluebutton.modules.layout.events.LayoutsLoadedEvent;
			import org.bigbluebutton.modules.layout.events.DefineLayoutEvent;
			import org.bigbluebutton.modules.layout.managers.LayoutManager;
			import org.bigbluebutton.modules.layout.model.LayoutDefinition;
			import org.bigbluebutton.modules.layout.model.LayoutFileLoader;
			import org.bigbluebutton.modules.layout.model.WindowLayout;
			
			private var _dispatcher:Dispatcher = new Dispatcher();
			private var _layouts:LayoutManager = null;
			private var _mdiCanvas:MDICanvas = null;
			private var _currentLayout:LayoutDefinition = null;
			private var _deactivated:Boolean = false;
			private var _defaultLayout:int = -1;
			private var _defaultLayoutTimer:Timer = new Timer(750, 1);
			private var _customLayoutNumber:int = 0;
			private var _firstTime:Boolean = true;
			// used to differenciate the user action from the layout application
			private var _disabledChangeDetection:Boolean = false;
			
			private var images:Images = new Images();
			[Bindable] private var icon_save:Class = images.disk;
			[Bindable] private var icon_load:Class = images.folder;
			[Bindable] private var icon_add:Class = images.add;
			[Bindable] private var buttonSize:int = 20;
			
			private function init():void{
				_mdiCanvas = getMdiCanvas(parent) as MDICanvas;
				
				_mdiCanvas.windowManager.container.addEventListener(ResizeEvent.RESIZE, resizeHandler);
		        _mdiCanvas.windowManager.container.addEventListener(Event.ACTIVATE, activateHandler);
		        _mdiCanvas.windowManager.container.addEventListener(Event.DEACTIVATE, deactivateHandler);

				for each (var window:MDIWindow in _mdiCanvas.windowManager.windowList) {
					setupWindowListener(window);
				}
				
				// typically populateComboBox() is called before init()
				_defaultLayoutTimer.addEventListener(TimerEvent.TIMER, applyDefaultLayout);
				_defaultLayoutTimer.start();
				
				// it only dispatches the activate event when the user starts to interact with the canvas
				deactivateHandler();
			}
			
			private function resizeHandler(e:ResizeEvent):void {
				// The main canvas has been resized
				_disabledChangeDetection = true;
				_currentLayout.applyToCanvas(_mdiCanvas);
				_disabledChangeDetection = false;
			}
			
			private function activateHandler(e:Event):void {
				_deactivated = false;
			}

			private function deactivateHandler(e:Event = null):void {
				// here I will store the current layout
				if (!_deactivated) {
					// Deactivating the main canvas, possibly because the user is resizing the window, saving the current layout
					if (comboBox.selectedIndex == -1) {
						// if the user selected a layout, then the _currentLayout is already set
						_currentLayout = LayoutDefinition.getLayout(_mdiCanvas, ResourceUtil.getInstance().getString('bbb.layout.combo.customName'));
					}
					_deactivated = true;
				}
			}
			
			private function populateComboBox(e:LayoutsLoadedEvent):void {
				_layouts = e.layouts;
				updateComboBox();
				if (_firstTime)
					applyDefaultLayout();
				_firstTime = false;
			}
			
			private function updateComboBox():void {
				comboBox.dataProvider.removeAll();
				// reset the default layout
				_defaultLayout = -1;
				for each (var value:LayoutDefinition in _layouts.list) {
					var item:Object = {label:value.name, layout:value};
					comboBox.dataProvider.addItem(item);
					if (value.default_)
						_defaultLayout = comboBox.dataProvider.getItemIndex(item);
				}
			}

			private function applyDefaultLayout(event:TimerEvent = null):void {
				if (_defaultLayout != -1 && _mdiCanvas != null && comboBox.selectedIndex != _defaultLayout) {
					comboBox.selectedIndex = _defaultLayout;
					changeLayout(comboBox.selectedItem.layout);
				}
				_defaultLayoutTimer.stop();
			}
			
			private function handleOpenWindowEvent(e:OpenWindowEvent):void {
				var window:MDIWindow = e.window as MDIWindow;
				setupWindowListener(window);
				if (_currentLayout != null) {
					_disabledChangeDetection = true;
					_currentLayout.applyToWindow(_mdiCanvas, window);
					_disabledChangeDetection = false;
				}
			}
			
			private function setupWindowListener(window:MDIWindow):void {
				window.addEventListener(MDIWindowEvent.RESIZE_START, invalidateLayout);
				window.addEventListener(MDIWindowEvent.DRAG_START, invalidateLayout);
				window.addEventListener(MDIWindowEvent.MINIMIZE, invalidateLayout);
				window.addEventListener(MDIWindowEvent.MAXIMIZE, invalidateLayout);
			}
			
			private function invalidateLayout(e:Event):void {
				if (!_disabledChangeDetection) {
					comboBox.prompt = ResourceUtil.getInstance().getString('bbb.layout.combo.custom');
					comboBox.selectedIndex = -1;
				}
			}
			
			private function onLayoutChanged(e:Event):void {
				changeLayout(e.currentTarget.selectedItem.layout);
			}
			
			private function changeLayout(layout:LayoutDefinition):void {
				_currentLayout = layout;
				_disabledChangeDetection = true;
				_currentLayout.applyToCanvas(_mdiCanvas);
				_disabledChangeDetection = false;
			}
			
			private function getMdiCanvas(p:DisplayObjectContainer):DisplayObject {
				if (p == null)
					return null;
					
				for (var i:int = 0; i < p.numChildren; ++i) {
					//if (String(getQualifiedClassName(p.getChildAt(i))).match("MainCanvas"))
					if (WindowLayout.getType(p.getChildAt(i)) == "MainCanvas") 
						return p.getChildAt(i);
					
					var obj:DisplayObject = getMdiCanvas(p.parent);
					if (obj != null)
						return obj;
				}
				return null;
			}
			
			public function getAlignment():String{
				return MainToolbar.ALIGN_RIGHT;
			}
			
			private function onAddButtonClick(event:Event):void {
				if (comboBox.selectedIndex == -1) {
					_customLayoutNumber += 1;
					var layout:LayoutDefinition = LayoutDefinition.getLayout(_mdiCanvas, ResourceUtil.getInstance().getString('bbb.layout.combo.customName') + " " + _customLayoutNumber); 
					_layouts.append(layout);
					var item:Object = {label:layout.name, layout:layout};
					comboBox.dataProvider.addItem(item);
					comboBox.selectedIndex = comboBox.dataProvider.length - 1;
				}
			}

			private function onSaveButtonClick(event:Event):void {
				var _fileRef:FileReference = new FileReference();
				_fileRef.addEventListener(Event.COMPLETE, onSaveComplete);
				_fileRef.save(_layouts.toXml().toXMLString(), "layouts.xml");
			}

			private function onSaveComplete(evt:Event):void { 
				Alert.show(ResourceUtil.getInstance().getString('bbb.layout.save.complete'), "", Alert.OK, _mdiCanvas);
			} 

			private function onLoadButtonClick(event:Event):void {
				var loader:LayoutFileLoader = new LayoutFileLoader(_mdiCanvas);
				loader.startLoading(_layouts);
				comboBox.selectedIndex = -1;
				_defaultLayoutTimer.start();
			}
			
			private function onCopyToClipboardButtonClick(event:Event):void {
				var name:String;
				if (comboBox.selectedIndex != -1)
					name = comboBox.selectedItem.label;
				else
					name = "Custom layout";
				System.setClipboard(LayoutDefinition.getLayout(_mdiCanvas, name).toXml().toXMLString());
				Alert.show(ResourceUtil.getInstance().getString('bbb.layout.copied'), "", Alert.OK, _mdiCanvas);
			}

		]]>
	</mx:Script>

	<mx:ComboBox id="comboBox"
		height="{buttonSize}"
		toolTip="{ResourceUtil.getInstance().getString('bbb.layout.combo.toolTip')}"
		prompt="{ResourceUtil.getInstance().getString('bbb.layout.combo.prompt')}"
		change="onLayoutChanged(event)"
	/>
	<mx:Button id="addBtn" 
		width="{buttonSize}" height="{buttonSize}" 
		toolTip="{ResourceUtil.getInstance().getString('bbb.layout.addButton.toolTip')}" 
		icon="{icon_add}"
		click="onAddButtonClick(event)"
	/>
	<mx:Button id="saveBtn" 
		width="{buttonSize}" height="{buttonSize}" 
		toolTip="{ResourceUtil.getInstance().getString('bbb.layout.saveButton.toolTip')}" 
		icon="{icon_save}" 
		click="onSaveButtonClick(event)"
	/>
	<mx:Button id="loadBtn" 
		width="{buttonSize}" height="{buttonSize}" 
		toolTip="{ResourceUtil.getInstance().getString('bbb.layout.loadButton.toolTip')}" 
		icon="{icon_load}" 
		click="onLoadButtonClick(event)"
	/>
	
</mx:HBox>
