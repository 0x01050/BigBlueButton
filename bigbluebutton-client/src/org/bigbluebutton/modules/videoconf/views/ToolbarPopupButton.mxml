<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:PopUpButton xmlns:mx="http://www.adobe.com/2006/mxml" icon="{camIcon}" 
		   xmlns:mate="http://mate.asfusion.com/"
		   click="openPublishWindow()" creationComplete="init()" 
		   mouseOver = "mouseOverHandler(event)"
		   mouseOut = "mouseOutHandler(event)"
		   toolTip="{this.selected ? ResourceUtil.getInstance().getString('bbb.toolbar.video.toolTip.stop') : ResourceUtil.getInstance().getString('bbb.toolbar.video.toolTip.start')}"
		   visible="{isPresenter}"
		   implements="org.bigbluebutton.common.IBbbToolbarComponent">

	<mate:Listener type="{ShortcutEvent.SHARE_WEBCAM}" method="remoteClick" />
	<mate:Listener type="{BBBEvent.CAM_SETTINGS_CLOSED}" method="handleCamSettingsClosedEvent"/>
	
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.main.views.MainToolbar;
			import org.bigbluebutton.modules.videoconf.events.ClosePublishWindowEvent;
			import org.bigbluebutton.modules.videoconf.events.ShareCameraRequestEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			import mx.controls.Menu;
			import mx.events.MenuEvent;
			import mx.collections.ArrayList;
			
			[Bindable] public var isPresenter:Boolean;
			
			private var images:Images = new Images();
			[Bindable] public var camIcon:Class = images.webcam;

			public const OFF_STATE:Number = 0;
			public const ON_STATE:Number = 1;
			
			public const STOP_PUBLISHING:Number = 0;
			public const START_PUBLISHING:Number = 1;
						
			private var _currentState:Number = OFF_STATE;

			
			private var dispatcher:Dispatcher;

			private var dp:Object = [];
			private var dataMenu:Menu;
			public var numberOfCamerasOff:int = 0;
			public var cameraIsOff:Object = new Object();
			
			private function init():void{
				numberOfCamerasOff = Camera.names.length;
				for(var i:int = 0; i < numberOfCamerasOff; i++) {
					cameraIsOff[String(i)] = true;	
					dp.push({label: Camera.names[i], icon: images.webcam, status: OFF_STATE});		
				}
	
				dataMenu = Menu.createMenu(this, dp, false);
				dataMenu.addEventListener("itemClick", changeHandler);
				dataMenu.addEventListener("mouseOver", mouseOverHandler);
				dataMenu.addEventListener("mouseOut", mouseOutHandler);
				
				this.popUp = dataMenu;
				dispatcher = new Dispatcher();
				this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.video.toolTip.start');
				camIcon = images.webcam;
				this.enabled = true;
				this.selected = false;
				_currentState = OFF_STATE;
			}
			
			public function remoteClick(e:ShortcutEvent):void{
				openPublishWindow();
				dispatchEvent(new ShortcutEvent(ShortcutEvent.REMOTE_FOCUS_WEBCAM));
			}
			
			public function publishingStatus(status:Number):void {
				if(status == START_PUBLISHING) {
					_currentState = ON_STATE;
					//this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.video.toolTip.stop');
					camIcon = images.webcamOn;
					this.selected = true;
					//cameraIsOff[cameraId] = false;
					//dp[cameraId].icon = images.webcamOn;
					//dp[cameraId].status = ON_STATE;
					//dp[cameraId].publishWindowIndex = publishWindowIndex;
					numberOfCamerasOff = numberOfCamerasOff - 1;
				}
				else {
					//if(cameraId != null) {
					//	dp[cameraId].icon = images.webcam;
					//	dp[cameraId].status = OFF_STATE;
					//	if(cameraIsOff[cameraId] == false) {
					//		cameraIsOff[cameraId] = true;
					//		numberOfCamerasOff = numberOfCamerasOff + 1;
					//	}
					//}
					if(numberOfCamerasOff == Camera.names.length) {
						_currentState = OFF_STATE;
						//this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.video.toolTip.start');
						camIcon = images.webcam;
						this.selected = false;
					}
				}
				var evt:BBBEvent = new BBBEvent("EnableToolbarPopupButton");
				dispatchEvent(evt);
						
				dataMenu.dataProvider = dp;
			}


			private function openPublishWindow():void{
				if(_currentState == ON_STATE) {
					_currentState = OFF_STATE;
					//this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.video.toolTip.start');
					camIcon = images.webcam;
					this.selected = false;
					dispatchEvent(new ClosePublishWindowEvent());				
				}
				else {
					_currentState = ON_STATE;
					//this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.video.toolTip.stop');
					camIcon = images.webcamOn;
					this.selected = true;
					var shareCameraRequestEvent:ShareCameraRequestEvent = new ShareCameraRequestEvent();
					dispatchEvent(shareCameraRequestEvent);
				}			
			}
			
			private function handleCamSettingsClosedEvent(e:BBBEvent):void {
				if(e.payload['clicked'] == "cancel"){
					this.enabled = true;
					this.selected = false;
					_currentState = OFF_STATE;
					camIcon = images.webcam;
				}
			}

			private function mouseOverHandler(event:MouseEvent):void {
				if(_currentState == ON_STATE)
					camIcon = images.webcamClose;
				else
					camIcon = images.webcamOn;			
			}

			private function mouseOutHandler(event:MouseEvent):void {
				if(_currentState == ON_STATE)
					camIcon = images.webcamOn;
				else
					camIcon = images.webcam;			
			}


			public function getAlignment():String{
				return MainToolbar.ALIGN_LEFT;
			}
			
			public function theory():String{
				return "Webcam button";
			}

			private function changeHandler(event:MenuEvent):void {
					if(dp[event.index].status == ON_STATE) {
						/*var close_evt:ClosePublishWindowEvent = new ClosePublishWindowEvent();
						close_evt.cameraId = String(event.index);
						close_evt.publishWindowIndex = dp[event.index].publishWindowIndex;
						dispatchEvent(close_evt);
						dp[event.index].icon = images.webcam;
						dp[event.index].waitingToStart = false;*/
					}
					else {
						/*var evt:OpenPublishWindowEvent = new OpenPublishWindowEvent();
						evt.defaultCamera = String(event.index);
						dispatchEvent(evt);
						this.enabled = false;*/

						var shareCameraRequestEvent:ShareCameraRequestEvent = new ShareCameraRequestEvent();
						shareCameraRequestEvent.defaultCamera = String(event.index);
						shareCameraRequestEvent.camerasArray = dp;
						dispatchEvent(shareCameraRequestEvent);
					}
					
			}

			public function setCamAsActive(camIndex:int):void {
				dp[camIndex].icon = images.webcamOn;
				dp[camIndex].status = ON_STATE;
				dataMenu.dataProvider = dp;
			}
		]]>
	</mx:Script>
</mx:PopUpButton>
