<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<CustomMdiWindow xmlns="org.bigbluebutton.common.*" 
			xmlns:mx="http://www.adobe.com/2006/mxml"
			xmlns:containers="flexlib.containers.*"
			implements="org.bigbluebutton.common.IBbbModuleWindow"
			title="Closed Caption"
			width="400" height="300"
			showCloseButton="false"
			creationComplete="onCreationComplete()">
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flexlib.controls.tabBarClasses.SuperTab;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import org.bigbluebutton.core.managers.UserManager;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.caption.events.RequestTranscriptsEvent;
			import org.bigbluebutton.modules.caption.events.SendEditCaptionHistoryEvent;
			import org.bigbluebutton.modules.caption.events.SendUpdateCaptionOwnerEvent;
			import org.bigbluebutton.modules.caption.model.Transcript;
			import org.bigbluebutton.modules.caption.model.Transcripts;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			[Bindable]
			private var transcriptsCollection:ArrayCollection;
			
			[Bindable]
			private var currentTranscript:Transcript;
			
			private var transcriptsObject:Transcripts;
			
			private var transcriptOwnerChangeWatcher:ChangeWatcher;
			
			private var optionsTab:OptionsTab;
			private var textTab:TextTab;
			
			override protected function createChildren():void {
				super.createChildren();
				
				optionsTab = new OptionsTab();
				optionsTab.label = "Options";
				optionsTab.setChangeCallback(optionChange);
				captionTabs.addChild(optionsTab);
				
				textTab = new TextTab();
			}
			
			private function onCreationComplete():void {
				
				
				var requestTranscripts:RequestTranscriptsEvent = new RequestTranscriptsEvent(RequestTranscriptsEvent.REQUEST_TRANSCRIPTS_EVENT);
				requestTranscripts.callback = setTranscripts;
				var dispatcher:Dispatcher = new Dispatcher();
				dispatcher.dispatchEvent(requestTranscripts);
				
				captionTabs.closePolicy = SuperTab.CLOSE_NEVER;
			}
			
			private function setTranscripts(t:Transcripts):void {
				transcriptsObject = t;
				
				if (UserManager.getInstance().getConference().amIModerator()) {
					transcriptsCollection = new ArrayCollection();
					for each (var l:String in ResourceUtil.getInstance().localeNames) {
						transcriptsCollection.addItem({locale: l});
					}
				} else {
					transcriptsCollection = t.transcriptCollection;
				}
				
				optionsTab.setTranscriptCollection(transcriptsCollection);
			}
			
			public function getPrefferedPosition():String {
				return MainCanvas.POPUP;
			}
			
			private function optionChange(type:int, val:Object):void {
				switch (type) {
					case OptionENUM.LOCALE:
						onLocaleChange(String(val));
						break;
					case OptionENUM.SIZE:
						textTab.setFontSize(int(val));
						break;
					case OptionENUM.FAMILY:
						textTab.setFontFamily(String(val));
						break;
					case OptionENUM.TEXTCOLOR:
						textTab.setTextColor(uint(val));
						break;
					case OptionENUM.BACKCOLOR:
						textTab.setBackgroundColor(uint(val));
						break;
				}
			}
			
			private function onLocaleChange(locale:String):void {
				currentTranscript = transcriptsObject.findLocale(locale);
				
				optionsTab.setCurrentTranscript(currentTranscript);
				textTab.setCurrentTranscript(currentTranscript);
				
				if (transcriptOwnerChangeWatcher) {
					transcriptOwnerChangeWatcher.unwatch();
				}
				
				if (currentTranscript) {
					transcriptOwnerChangeWatcher = BindingUtils.bindSetter(onTranscriptOwnerIDChange, currentTranscript, "ownerID");
					onTranscriptOwnerIDChange(currentTranscript.ownerID);
				}
				
				if (!captionTabs.contains(textTab)) {
					addTextTab();
				}
			}
			
			private function onTranscriptOwnerIDChange(o:Object):void {
				var ownerID:String = o as String;
				
				optionsTab.transcriptOwnerIDChange(ownerID);
				textTab.transcriptOwnerIDChange(ownerID);
				
				textTab.label = currentTranscript.locale + " - ";
				if (ownerID == "") {
					//unclaimed text
					//ownerNameOutputLabel.text = "Owner - " + "None";
					textTab.label += "None";
				} else if (ownerID == UserManager.getInstance().getConference().getMyUserId()) {
					//release text
					textTab.label += "You";
				} else {
					//claimed by other
					textTab.label += UserManager.getInstance().getConference().getUser(ownerID).name;
				}
			}
			
			private function addTextTab():void {
				textTab.setCurrentTranscript(currentTranscript);
				textTab.setFontFamily(String(optionsTab.fontFamilyCombo.selectedItem));
				textTab.setFontSize(int(optionsTab.fontSizeCombo.selectedItem));
				
				captionTabs.addChildAt(textTab, 0);
			}
			
		]]>
	</mx:Script>
	<mx:Box width="100%" height="100%" horizontalAlign="left">
		<containers:SuperTabNavigator id="captionTabs"
									  width="100%" height="100%" minTabWidth="20"
									  dragEnabled="false" popUpButtonPolicy="off" />
	</mx:Box>
</CustomMdiWindow>
