<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	creationComplete="onCreationComplete()"
	backgroundColor="red"
  pageTitle="WebcamPreview"
	width="600" height="400"
	layout="absolute">	
  <mx:Script>
    <![CDATA[    
      import mx.core.UIComponent;
      import mx.events.ResizeEvent;      
      import org.bigbluebutton.common.Images;
      import org.bigbluebutton.common.LogUtil;
      import org.bigbluebutton.common.Role;
      import org.bigbluebutton.common.events.CloseWindowEvent;
      import org.bigbluebutton.common.events.LocaleChangeEvent;
      import org.bigbluebutton.core.EventConstants;
      import org.bigbluebutton.core.UsersUtil;
      import org.bigbluebutton.core.events.CoreEvent;
      import org.bigbluebutton.core.managers.UserManager;
      import org.bigbluebutton.main.views.MainCanvas;
      import org.bigbluebutton.modules.videoconf.business.TalkingButtonOverlay;
      import org.bigbluebutton.modules.videoconf.events.CloseAllWindowsEvent;
      import org.bigbluebutton.modules.videoconf.events.OpenVideoWindowEvent;
      import org.bigbluebutton.modules.videoconf.events.StartBroadcastEvent;
      import org.bigbluebutton.modules.videoconf.events.StopBroadcastEvent;
      import org.bigbluebutton.modules.videoconf.model.VideoConfOptions;
      import org.bigbluebutton.util.i18n.ResourceUtil;
      
      [Bindable] private var defaultWidth:Number = 320;
      [Bindable] private var defaultHeight:Number = 240;
      
      private var _video:Video;
      private var _videoHolder:UIComponent;
      private var camIndex:int = 0;
      private var camWidth:Number = 320;
      private var camHeight:Number = 240;
      private var _camera:Camera = null;
      private var quality:Number = 0;
      private var PADDING_HORIZONTAL:Number = 6;
      private var PADDING_VERTICAL:Number = 29;
      private var _minWidth:int = 160 + PADDING_HORIZONTAL;
      private var _minHeight:int = 120 + PADDING_VERTICAL;
      private var aspectRatio:Number = 1;
      
      private var userID:String;
                
      private function onCreationComplete():void{
        _videoHolder = new UIComponent();
        _videoHolder.width = camWidth;
        _videoHolder.height = camHeight;
        this.addChild(_videoHolder);				
        
        this.minWidth = _minWidth;
        this.minHeight = _minHeight;

        trace('WebcamSA::onCreationComplete');
        initExternalInterface();
        displayCamera("0", 30, 10, 0, 90);
      }
      
      private function initExternalInterface():void {
        trace('WebcamSA::initExternalInterface');
        if (ExternalInterface.available) {
          ExternalInterface.addCallback("startPreviewCamera", handleStartPreviewCameraRequest);
          ExternalInterface.addCallback("stopPreviewCamera", handleStopPreviewCamera);
        }
      }
      
      private function handleStartPreviewCameraRequest(camIndex:String, camKeyFrameInterval:int, camModeFps:Number, 
                                                                        camQualityBandwidth:int, camQualityPicture:int):void {
        displayCamera(camIndex, camKeyFrameInterval, camModeFps, camQualityBandwidth, camQualityPicture);
      }
      
      private function handleStopPreviewCamera():void {
        stopCamera();
      }
      
      public function handleUserTalkingEvent(event:CoreEvent):void {
        if (event.message.userID ==  userID) {
          if (event.message.talking) {
            notTalkingEffect.end();
            talkingEffect.play([_videoHolder]);            
          } else {
            talkingEffect.end();
            notTalkingEffect.play([_videoHolder]);
          }
        }
      }
      
      public function displayCamera(camIndex:String, camKeyFrameInterval:int, camModeFps:Number, camQualityBandwidth:int, camQualityPicture:int):void {
        trace('WebcamSA::displayCamera');
        stopCamera();
        
        if (Camera.names.length == 0) {
          trace('WebcamSA::bbb.video.publish.hint.noCamera');
          return;
        }
        
        _camera = Camera.getCamera(camIndex);
        if (_camera == null) {
          trace('WebcamSA::bbb.video.publish.hint.cantOpenCamera');
          return;
        }
        
        setResolution(camWidth, camHeight);
        
        _camera.setMotionLevel(5, 1000);
               
        _camera.setKeyFrameInterval(camKeyFrameInterval);
        _camera.setMode(camWidth, camHeight, camModeFps);
        _camera.setQuality(camQualityBandwidth, camQualityPicture);
        
        if (_camera.width != camWidth || _camera.height != camHeight) {
          trace("WebcamSA::Resolution " + camWidth + "x" + camHeight + " is not supported, using " + _camera.width + "x" + _camera.height + " instead");
          setResolution(_camera.width, _camera.height);
        }				
        
        _video = new Video;
        _video.attachCamera(_camera);
        
        if (aspectRatio > _videoHolder.width / _videoHolder.height) {
          _video.width = _videoHolder.width;
          _video.height = _videoHolder.width / aspectRatio;
          _video.x = 0;
          _video.y = (_videoHolder.height - _video.height) / 2;
        } else {
          _video.width = _videoHolder.height * aspectRatio;
          _video.height = _videoHolder.height;
          _video.x = (_videoHolder.width - _video.width) / 2;
          _video.y = 0;
        }				
        
        _videoHolder.addChild(_video);
        
      }
              
      private function stopCamera():void {
        _camera = null;
        if (_video != null) {
          _videoHolder.removeChild(_video);
          _video.attachCamera(null);
          _video.clear();
          _video = null;
        }
        
      }
      
      private function setResolution(width:int, height:int):void {
        camWidth  = width;
        camHeight = height;
        setAspectRatio(camWidth, camHeight);        
      }
      
      private function setAspectRatio(width:int, height:int):void {
        aspectRatio = (width/height);
        this.minHeight = Math.floor((this.minWidth - PADDING_HORIZONTAL) / aspectRatio) + PADDING_VERTICAL;
      }
      
      
    ]]>
  </mx:Script>
  
  <mx:Glow id="talkingEffect" duration="500" alphaFrom="1.0" alphaTo="0.3"
           blurXFrom="0.0" blurXTo="30.0" blurYFrom="0.0" blurYTo="30.0" color="0xFF0000"/>
  <mx:Glow id="notTalkingEffect" duration="500" alphaFrom="0.3" alphaTo="1.0"
           blurXFrom="30.0" blurXTo="0.0" blurYFrom="30.0" blurYTo="0.0" color="0xFF0000"/>
  
  <mx:Fade id="dissolveOut" duration="1000" alphaFrom="1.0" alphaTo="0.0"/>
  <mx:Fade id="dissolveIn" duration="1000" alphaFrom="0.0" alphaTo="1.0"/>
  
  
</mx:Application>
